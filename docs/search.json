[
  {
    "objectID": "lectures/wyklad1.html",
    "href": "lectures/wyklad1.html",
    "title": "Komputery klasyczne i kwantowe.",
    "section": "",
    "text": "Nature isn’t classical, dammit, and if you want to make a simulation of Nature, you’d better make it quantum mechanical, and by golly it’s a wonderful problem because it doesn’t look so easy. Richard Feynman\nQuntum Machine Learning\nCo oznacza termin kwantowe uczenie maszynowe?\nUczenie maszynowe (ale również i uczenie głębokie) to nauka i ,,sztuka’’ opisująca jak sprawić by komputery mogły ,,uczyć się’’ na podstawie danych, tak by rozwiązać problemy, których typowe programowanie nie miałoby sensu (lub byłoby zbyt skomplikowane). Więcej na ten temat znajdziesz w książce\nObliczenia kwantowe opisują przetwarzenie informacji na urządzeniach pracujących zgodnie z zasadami mechaniki kwantowej.\nOba kierunki są istotne w procesie przetwarzania danych obecnie i w niedalekiej przyszłości. Dlatego naturalnym pytaniem jest jak je ze sobą połączyć?\nQML to realizowanie metod uczenia maszynowego, które mogą być wykonywane na komputerach kwantowych.\nKwantowe uczenie maszynowe możemy określić jako uczenie maszynowe realizowane na komputerach kwantowych. Zasadniczym jest pytanie na ile i czy wogóle komputery kwantowe mogą poprawić jakość modeli uczenia maszynowego i czy pozwalają zrealizować coś więcej niż wykorzystanie klasycznych komputerów.\nOdpowiedź To zależy:"
  },
  {
    "objectID": "lectures/wyklad1.html#sztuczna-inteligencja",
    "href": "lectures/wyklad1.html#sztuczna-inteligencja",
    "title": "Komputery klasyczne i kwantowe.",
    "section": "Sztuczna inteligencja",
    "text": "Sztuczna inteligencja\n\nHistoria AI sięga 1950 roku (A. Turing). Rozwój technologii związanych z danymi ustrukturyzowanymi i nieustrukturyzowanymi realizowany np. w:\n\nrozpoznawanie i tworzenie ,,mowy’’\n,,rozumienie’’ obrazów i filmów\nrozgrywanie gier\nrekomendacje\nsystemy diagnostyczne\nplanowanie\npodejmowanie decyzji\nbooty, agenci …\n\nZadania te realizowane są w oparciu o uczenie maszynowe (Machine Learning) i głębokie sieci neuronowe (Deep Learning).\nDlaczego tak chętnie używamy:\n\nWykładniczy wzrost ilości (treningowych) danych dostępnych w social mediach, internecie, aplikacjach mobilnych, IoT.\nWzrost możliwości i spadek ceny (kosztów) jakości sprzętu komputerowego - co-procesory GPU, TPU, …\nOprogramowanie Open Source\nPrzewaga konkurencyjna przedsiębiorstw z AI na firmami bez AI\n\n\n\nUwaga! Zakładam, że znasz podstawowe pojęcia związane z uczeniem maszynowym i głębokim.\n\nUczenie maszynowe (ang. Machine Learning) można podzielić na trzy główne kategorie:\n\nUczenie nadzorowane (ang. supervised learning) - posiadając oznaczone dane \\((x_i, y_i)\\) szukamy funkcji \\(f(x_i) = y_i\\) tak by uogólnić ją na nowe dane. Np. dać kredyt, czy na obrazie jest kot albo pies itp.\nUczenie nienadzorowane (ang. unsupervised learning) - posiadając dane \\((x_i)\\) szukamy struktury w danych.\nUczenie przez wzmacnianie (ang. reinforcement learning) - agent uczy się na podstawie nagród i kar."
  },
  {
    "objectID": "lectures/wyklad1.html#klasyczne-komputery",
    "href": "lectures/wyklad1.html#klasyczne-komputery",
    "title": "Komputery klasyczne i kwantowe.",
    "section": "Klasyczne komputery",
    "text": "Klasyczne komputery\nKomputer to fizyczne urządzenie bazujące na obwodach elektronicznych (electronic circuits), które służy do przetwarzania informacji.\n\nAlgorytmy (programy komputerowe - software) to przepisy jak manipulować informacją reprezentowaną przez prąd w obwodzie, aby wykonywać obliczenia.\n\nMoore’s law An observation that the number of transistors on microchip roughly doubles every two years, whereas its cost is halved over that same timeframe. The growth of microprocessors is exponential\n\nZwiększenie szybkości działania oraz pojemności klasycznych komputerów co dwa lata zmniejszając przy tym koszty.\n\nFizyczne (klasyczne) ograniczenia dla procesorów\n\nRozmiary tranzystora \\(\\sim\\) rozmiary atomów - lata 90’te \\(500 nm\\) obecnie \\(14 nm\\) i \\(7 nm\\).\nPrędkość światła \\(\\sim\\) max. prędkość przesyłu informacji.\nWysoki koszt wytwarzania (kierunek układów wieloprocesorowych)\nWysoki pobór prądu, ciepło\n\nDla wszystkich praktycznych przypadków wystarczy nam opis makroskopowy i klasyczne teorie do opisu własności prądu w obwodach. Jedak gdy naszym celem jest realizacja obliczeń z wykorzystaniem własności obiektów mikroskopowych okazuje się, że klasyczny opis przestaje być wystarczający i musimy użyć mechaniki kwantowej. Jak do tej pory jest to najlepiej przetestowany i stosowany opis mikroświata jaki znamy.\nKomputer, na którym obliczenia wykonywane są zgodnie z zasadami mechaniki kwantowej nazywamy komputerem kwantowym."
  },
  {
    "objectID": "lectures/wyklad1.html#obliczenia-kwantowe",
    "href": "lectures/wyklad1.html#obliczenia-kwantowe",
    "title": "Komputery klasyczne i kwantowe.",
    "section": "Obliczenia kwantowe",
    "text": "Obliczenia kwantowe\n\nFilm wprowadzający: link\n\nTermin Mechanika Kwantowa (MK) używany jest zamiennie z terminem Teoria Kwantowa. Istnieją teorie kwantowe wychodzące poza zakres mechaniki kwantowej (np. Kwantowa Teoria Pola). MK przewiduje wyniki rezultatów doświadczeń przeprowadzanaych na układach kwantowych, czyli mikroskopowych fizycznych obiektach, dla których fizyka Newtonowska nie prowadzi do prawidłowych wyników (np. atom wodoru). Opisuje ona zachowanie np. fotonów, elektronów lub kwantowych bitów.\n\nNa naszym wykładzie nie będą interesować nas własności fizyczne kubitów a ograniczymy się do znajomości ich pewnych, abstrakcyjnych stanów w jakich mogą się one znajdować. Stany te numerowane będą liczbami naturalnymi.\n\nFizyka klasyczna realizowana jest jako graniczny przypadek MK, jednak fizycy zazwyczaj rozdzielają zagadnienia i stosują odpowiednią teorię do odpowiedniego problemu. Nikt nie buduje mostów używając MK.\nZe wzlgędu, iż wyniki MK są probabilistyczne, bardzo często można spotkać przekonanie, że MK jest teorią statystyczną. Nie jest to jednak prawda! MK można uznać za uogólnienie klasycznej definicji prawdopodobieństwa.\n\nHistoria MK\nPoczątek MK związany jest z pracami Maxa Plancka (1900) i Alberta Einsteina (1905), którzy wprowadzili pojęcie kwantu - czyli najmniejszej porcji energii. Natomiast dalszy rozwój MK związany jest z pracami Nielsa Bohra, Erwina Schrödingera, Louisa de Broglie, Heisenberga, Diraca, Feynmana, … Pozostałe informacje możesz znaleźć w artykule o obliczeniach kwantowych\n\nInformatyków (najczęściej) nie interesuje, w jaki sposób właściwości fizyczne układów są wykorzystywane do zapisu informacji klasycznej w komputerze klasycznym. Tym bardziej informatyków (i analityków danych) nie musi interesować w jaki sposób informacja kwantowa jest fizycznie realizowana na komputerze kwantowym.\nCzy prowadząc samochód zastanawiasz się jak dokładnie działają wszystkie części? A czy pisząc kod modelu zastanawiasz się jak został on zaimplementowany w bibliotece?\n\n\n\nHistoria obliczeń kwantowych\n\n1936 Alan Turing On Computable Numbers (Hilbert Problems) - universal computing machine local\n1976 Roman S. Ingarden - Quantum Information Theory\n1980 Paul Benioff - teoretyczna możliwość komputerów kwantowych “Computer as a Physical System…”\n1981 Richard Feynman - Klasyczne komputery nie podołają z symulowaniem procesów kwantowych.\n1985 David Deutsch pierwszy opis kwantowej maszyny Turinga. Algorytm do uruchomienia na komputerze kwantowym. Bramki kwantowe.\n1994 Peter Shor - Algorytm faktoryzacji liczb w czasie wielomianowym.\n1996 Lov Grover - Algorytm Grover’a “A fast quantum mechanical algorithm for database search”\n2000 pierwszy 5-kubiotwy kwantowy komputer (oparty na nuklearnym rezonansie magnetycznym).\n2001 demonstracja algorytmu Shora\n2007 implementacja algorytmu Deutschas’a\n2011 D-Wave pierwsza sprzedaż komercyjnego komputera kwantowego\n2013 pierwszy komputer kwantowy w Google\n2017 IBM - klasyczne superkomputery nie mogą symulować więcej niż 56 kubitów - quantum supremacy\n23 październik 2019 Google ogłasza uzyskanie QS na 53 kubitach - superkomputer powinien działać i liczyć 10000 lat.\nIBM zmienia algorytm próbkowania uzyskując lepszy wynik na superkomputerze niż Google.\n2020 University of Science and Technology of China (Jian-Wei Pan) 76 fotonowych kubitów na komputerze Jiuzhang - 20 sekund samplingu = 600 milionów lat obliczeń na super komputerze.\n2021 USTC … 2022 Xanadu\n\nOd około 1990 roku Fizycy i inforamtycy pracują nad fizyczną realizacją komputerów kwantowych. Jednym ze sposobów realizacji obliczeń wykonywanych na komputerach kwantowych jest model oparty o kwantowe obwody (quantum circuit), który w swoim działaniu wykorzystuje qubity zamiast bitów. Analogicznie do obwodów klasycznych możemy zdefiniować bramki kwantowe (quantum gates), które realizują operacje na qubitach. Fizyczne zbudowanie komputera kwantowego, czy raczej kubitu nie jest trywialne, gdyż wymaga manipulacji bardzo małym układem, który zazwyczaj wrażliwy jest na każdy rodzaj oddziaływania (dekoherencja).\n\n\n\nDlaczego chcemy używać komputerów kwantowych?\n\nQuantum Complexity\n\nNowy paradygmat wykorzystujący własności interferencji, superpozycji i splątania do wykonywania obliczeń. Realizowany (aktualnie) w trzech modelach:\n\nQuantum Circuits - model bramkowy, QAOA, VQA, metody hybrydowe\nAdiabatyczne obliczenia kwantowe (DWave) - Minimalizacja energii, QUBO, analogi modelu Isinga.\nTopologiczne komputery kwantowe\n\nProblemy, które uważamy za trudne do rozwiązania klasycznie (optymalizacja) będą łatwe dla komputerów kwantowych. Na przykład faktoryzacja liczby.\nKlasyczne komputery nie są w stanie symulować kwantowego komputera. Koszt najlepszych symulatorów rośnie wykładniczo wraz ze wzrostem liczby kubitów.\nMożliwości komputerów kwantowych są ograniczone.\nKwantowy komputer może symulować efektywnie dowolny fizyczny process, który realizuje się w naturze. (ale tego nie jesteśmy pewni).\n\nQuantum Error Correction\n\nDekoherencja niszczy stan komputera kwantowego - a to wprowadza błędy obliczeniowe. Jak zapobiec dekoherencji skoro to oddziaływanie ze środowiskiem.\nObliczenia Kwantowe potrzebują tzw. korekcji błędów.\nAktualnie ERA Noisy Intermediate-Scale Quantum (NISQ)\n\n\nRealizacja fizyczna komputerów kwantowych\nprocesory kwantowe\n\n\n\nProces obliczeń kwantowych\nWykonanie obliczeń związane jest z pojęciem fizycznego doświadczenia. Będzie się ono składać z trzech części:\n\nprzygotowanie (przygotuj stan kwantowy kubitów),\newolucja (przeprowadź transformację za pomocą bramek kwantowych),\npomiar i interpretacja wyników.\n\n\nPodobnie w informatyce i w analizach danych wykonujemy obliczenia klasyczne. przygotowujemy dane (stan początkowy); następnie wykonujemy program (ewolucja) i odczytujemy wyniki (pomiar).\n\nNie obserwujemy tych etapów podczas codziennej interakcji z komputerem, więc nie zauważamy w sposób świadomy powyższego schematu działania. Piotr Gawron, Oscar Słowik - Rewolucja Stanu, Fantastyczne wprowadzenie do informatyki kwantowej.\n\nKażdy komputer kwantowy (koprocesor) musi komunikować się z podukładem klasycznym."
  },
  {
    "objectID": "lectures/wyklad1.html#quantum-machine-learning",
    "href": "lectures/wyklad1.html#quantum-machine-learning",
    "title": "Komputery klasyczne i kwantowe.",
    "section": "Quantum Machine Learning",
    "text": "Quantum Machine Learning\n\nDane w QML\n\n\nCC - Classical data using classical computers, algorytmy inspirowane obliczeniami kwantowymi\nQC - Quantum data using classical (ML) computers. link1, link2, link3\nCQ - Classical data on qunatum computers. Na tym chcemy się skupić.\nQQ - Quantum data on quantum computers. Who knows?\n\n\n\nRealizacje problemów biznesowych na komputerach kwantowych\n\nSystemy obrony - kryptografia\nRigetti - przewidywanie pogody\nNASA (QuAIL) - Kontrola lotów kosmicznych\nAccenture - Finanse, logistyka, komunikacja i systemy bezpieczeństwa\nBASF - Obliczenia molekularne w chemii kwantowej.\nFord link\nVolkswagen link\nBMW link\nBoeing/Airbus\nGoldman Sach / JPMorgan\nDWave DWave and VW\nIBM Case study\nIBM 127 qubitów\nQuantum Natural Language Processing link\n\n\n\nDostęp do obliczeń kwantowych w chmurze\n\nIBM Quantum z wykorzystaniem biblioteki qiskit.\nPennylane z wykorzystaniem biblioteki pennylane.\nCirq Google z wykorzystaniem biblioteki cirq."
  },
  {
    "objectID": "lectures/wyklad2.html",
    "href": "lectures/wyklad2.html",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "",
    "text": "\\[\n\\newcommand{\\bra}[1]{\\left \\langle #1 \\right \\rvert}\n\\newcommand{\\ket}[1]{\\left \\rvert #1 \\right \\rangle}\n\\newcommand{\\braket}[2]{\\left \\langle #1 \\middle \\rvert #2 \\right \\rangle}\n\\]\nObliczenia (przetwarzanie) wykonywane przez komputer możemy zdefiniować jako transformacje jednego stanu pamięci na inny. Z matematycznego punktu widzenia oznacza to, że obliczenia to funkcje, które przekształcają informacje.\nW przypadku klasycznych komputerów podstawową jednostką pamięci jest bit (ang. binary digit). Funkcje, które operują na bitach nazywamy bramkami logicznymi (ang. logic gates)."
  },
  {
    "objectID": "lectures/wyklad2.html#bramki-logiczne",
    "href": "lectures/wyklad2.html#bramki-logiczne",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "Bramki logiczne",
    "text": "Bramki logiczne\nBramki logiczne to funkcje Boolowskie, które możemy składać w bardziej złożone układy (ang. circuits). Stworzone przez George’a Boole’a w 1854 roku, algebra boola jest matematyczną strukturą, która opisuje zachowanie się obiektów, które mogą przyjmować tylko jedną z dwóch wartości: prawda lub fałsz. Zdolne są one do wykonywania np. dodawania, mnożenia czy też innych bardziej skomplikowanych operacji.\nW latach trzydziestych XX wieku Claude Shannon zastosował algebrę boola do analizy i projektowania układów elektrycznych. Co oznacza, że zareprezentował on funkcje boolowskie za pomocą przełączników elektrycznych. Dlatego też komponenty elektroniczne odpowiadające funkcjom boolowskim nazywamy bramkami logicznymi.\n\nCiekawostka. Richard Feynman wykładał teorię obliczeń na Kalifornijskim Instytucie Technologii. Wykład ten prezentowany jest obecnie jako Feynmana wykłady o obliczeniach (ang. Feynman Lectures on Computation).\n\nIstotnym aspektem klasyczych bramek logicznych jest również to, że liczba bitów wejściowych nie musi być taka sama jak liczba bitów wyjściowych.\nZ pozoru obliczenia przedstawione w ten sposób wyglądają jako abstrakcjny matematyczny koncept. Jednak jego realizacja zawsze wymaga jakiegoś układu fizycznego realizującego wykonywanie funkcji. Nie ma znaczenia jak ten układ zostanie zrealizowany: kule bilardowe, przełączniki elektroniczne, tranzystory, czy cokolwiek innego.\n\nLogika obliczeń jest niezależna od ich realizacji.\n\nZ punktu widzenia realizacji zawsze chodzi nam o kontrolowany sposób zmiany stanu układu.\nNa wykładzie postaramy się wskazać jak i kiedy logika klasycznych obliczeń może być uogólniona przez logikę obliczeń kwantowych. Jasne jest, że przypadek klasyczny powinien być szczególnym przypadkiem kwantowego.\nobwody klasyczne\nZobaczmy jakie bramki możemy określić dla jednego bitu.\n\nBramki logiczne dla jednego bitu\nIle bramek mamy gdy input = 1 bit, output = 1 bit? Ile funkcji możemy zdefiniować dla odwzorowania jednego bitu w jeden bit?\nOperatory działające na jednym bicie możemy określić jako\n\nIdentyczność (ang. identity) - \\(I\\)\nNegacja (ang. negation) - \\(X\\)\nStałe \\(0\\)\nStałe \\(1\\)\n\n\n\nInne bramki i operacje logiczne\n\nZróbmy krótkie przedstawienie niektórych, klasycznych bramek logicznych.\nBramka logiczna jest implementacją funkcji boolowskiej. Operacją logiczną przeprowadzaną na jednym lub kilku binarnych wejściach produkującą jedną binarną wartość wyjściową. \\[f: \\{0,1\\}^{n} \\to \\{0,1\\} \\]\nKażdy element algebry boola (Boolean Statements) musi być określony jako prawda albo fałsz.\nBramki logiczne możemy wyrazić za pomocą tablicy prawdy (ang. truth table). Tablica ta posiada jedną kolumnę dla każdej zmiennej wejściowej oraz jedną kolumnę dla zmiennej wyjściowej. Kolumna wyjściowa przedstawia wszystkie możliwe wyniki przedstawianej logicznej operacji reprezentowanej przez tablicę. Każdy wiersz tablicy prawdy reprezentuje jedną możliwą kombinację (konfiguracje) danych wejściowych oraz wyniku.\nPodstawowe bramki, które znasz to:\n\nAND - koniunkcja\nOR - alternatywa\nNOT - negacja\nNAND - not and\nXOR - alternatywa wykluczająca (Exclusive OR) - dodawanie modulo 2\n\n\nZadanie: zapisz tablicę prawdy dla każdej bramki.\n\n\nNOT gate\n\n\n\nA\nnot A\n\n\n\n\n0\n\n\n\n1\n\n\n\n\n\n\nAND gate\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\n\n\nOR gate\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\n\n\nNAND\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\n\n\nXOR\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\nPowyższe bramki pozwalają łączyć Ci pojedyncze elemnty algebry boola ze sobą.\n\nZadanie: Porównaj AND oraz OR z potocznym, językowym znaczeniem tych słów.\n\n\nZadanie: Dlaczego Algebra boola nazywana jest algebrą zbiorów?\n\n\nZadanie: Czy składanie podzbiorów zbioru również generuje algebrę boola ?\n\n\nZadanie: Kiedy dodajemy i mnożymy liczby jakie operacje i własności wykorzystujemy?\n\n\nZadanie: ile bramek logicznych możemy stworzyć dla jednego bitu, dwóch bitów, trzech bitów?\n\n\n\n\nUniweralne bramki logiczne - NAND\nTak jak widzieliśmy dla 1-bit mieliśmy 4 bramki logiczne. Dla 2-bitów mieliśmy 16 bramek logicznych. Dla 3-bitów mamy 256 możliwości. W przypadku 2-bitów nie wypisaliśmy wszystkich bramek, dlaczego? A czy musimy realizować wszystkie?\n\nNa szczęście odpowiedź jest negatywna.\n\nIstnieją tzw. zbiory bramek uniwersalnych dzięki którym możemy zrealizować dowolną funkcję boolowską.\n\nNOT, AND, OR\nNAND, AND\nNAND\nNOT, OR\nNOR"
  },
  {
    "objectID": "lectures/wyklad2.html#fizyczna-realizacja-klasycznych-bramek-logicznych",
    "href": "lectures/wyklad2.html#fizyczna-realizacja-klasycznych-bramek-logicznych",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "Fizyczna realizacja klasycznych bramek logicznych",
    "text": "Fizyczna realizacja klasycznych bramek logicznych\nBramka NAND jest bramką uniwersalną, co oznacza, że każdą funkcję boolowską można zrealizować za pomocą układu bramek NAND. Dlatego ważne dla komputerów klasycznych jest, aby znaleźć praktyczną realizację i jej implementację w układach.\nIstnieje wiele fizycznych realizacji bramki NAND.\n\nImplementacja komórki pamięci RAM\nRandom Access Memory (RAM) uzywany jest do przechowywania instrukcji i danych aktualnie używanych przez CPU. Stan pamięci RAM jest tracony gdy urządzenie zostanie odłączone od zasilania. Pamięć RAM jest zorganizowana w komórki, które mogą przechowywać pojedynczy bit informacji. Do implementacji pamięci RAM wykorzystuje się zbiór bramek logicznych (NAND) oraz tranzystorów."
  },
  {
    "objectID": "lectures/wyklad2.html#szyfrowanie-z-wykorzystaniem-bramki-xor",
    "href": "lectures/wyklad2.html#szyfrowanie-z-wykorzystaniem-bramki-xor",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "Szyfrowanie z wykorzystaniem bramki XOR",
    "text": "Szyfrowanie z wykorzystaniem bramki XOR\nWeźmy dwie sekwencje bitów:\nsekwencja A: \\[1 0 1 1 0 1 1 1 0 0 0\\]\nsekwencja B: \\[0 1 1 0 1 1 0 1 1 0 1\\]\ni obliczmy XOR między dwoma sekwencjami \\(A\\) XOR \\(B\\). Zgodnie z tablicą prawdy dla XOR otrzymujemy: \\[1 1 0 1 1 0 1 0 1 0 1\\]\n\nOblicz A XOR B XOR B. Co możesz zauważyć?\n\n\nSender decyrpting message\nZamień wiadomość, którą chcesz zaszyfrować na binarną postać (czyli jako sekwencję zer i jedynek).\nWeź losową sekwencję bitów (klucz szyfrujący) którą zna tylko nadawca i odbiorca.\n\\(1001011010...\\) - wiadomość\n\\(0110101010...\\) - klucz szyfrujący, czyli losowa sekwencja bitów\nZaszyfruj wiadomość wykonując operację XOR na każdym bicie wiadomości i klucza szyfrującego. Tak otrzymaną wiadomość (zaszyfrowaną) wyślij do odbiorcy.\n\n\ndecyrpting message\nOdbiorca otrzymuje zaszyfrowaną wiadomość i klucz szyfrujący.\nMessage XOR SecretSequence = EncryptedMessage\nMessage XOR SecretSequence XOR SecretSequence = Message\nNie powinniśmy używać SecretSequence więcej niż raz. Jeśli użyjemy go więcej niż raz, to łatwo jest złamać szyfrowanie. Zakodowana wiadomość przestaje być losowa."
  },
  {
    "objectID": "cwiczenia/pennylane.html",
    "href": "cwiczenia/pennylane.html",
    "title": "Pennylane",
    "section": "",
    "text": "Codebook\nPennyLane Challenges"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Informacje ogólne",
    "section": "",
    "text": "Kod: 232530-D\nSemestr zimowy 2023/2024,\nSGH Szkoła Główna Handlowa w Warszawie\nPodstawowe informacje znajdziesz w sylabusie.\nCiekawe książki i strony internetowe zamieszczone zostały w zakładce książki. Jeśli chciał(a)byś coś dodać prześlij informację przez MS teams."
  },
  {
    "objectID": "index.html#var-main.nazwa",
    "href": "index.html#var-main.nazwa",
    "title": "Informacje ogólne",
    "section": "",
    "text": "Kod: 232530-D\nSemestr zimowy 2023/2024,\nSGH Szkoła Główna Handlowa w Warszawie\nPodstawowe informacje znajdziesz w sylabusie.\nCiekawe książki i strony internetowe zamieszczone zostały w zakładce książki. Jeśli chciał(a)byś coś dodać prześlij informację przez MS teams."
  },
  {
    "objectID": "index.html#kalendarz",
    "href": "index.html#kalendarz",
    "title": "Informacje ogólne",
    "section": "Kalendarz",
    "text": "Kalendarz\n\nWykład\nWykład jest realizowany w trybie hybrydowym. Jest on NIEOBOWIĄZKOWY i odbywa się w sali C5D.\n\n02-10-2023 (poniedziałek) 11:40-13:20 -  Wykład 1 \n\nHistoria klasycznego i kwantowego komputera i jego zastosowania. Efekty kwantowe wykorzystywane do przyśpieszenia obliczeń.\n\n09-10-2023 (poniedziałek) 11:40-13:20 -  Wykład 2 \n\nKlasyczne bramki logiczne - algebra Boola, szyfrowanie\n\n16-10-2023 (poniedziałek) 11:40-13:20 - Wykład 3\n\nPrzestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów\n\n23-10-2023 (poniedziałek) 11:40-13:20 - Wykład 4\n\nKwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych\n\n30-10-2023 (poniedziałek) 11:40-13:20 - Wykład 5\n\nKwantowy Machine Learning w biznesie - metody i implementacje\n\n\nLaboratoria\nWszystkie laboratoria odbywają się w sali C5D.\n\n06-11-2023 (poniedziałek) 11:40-13:20 - Lab1\n\nPrzygotowanie środowiska programistycznego python z wykorzystaniem narzędzia Docker\n\n13-11-2023 (poniedziałek) 11:40-13:20 - Lab2\n\nKwantowe bity z wykorzystaniem biblioteki IBM Qiskit i Pennylane\n\n20-11-2023 (poniedziałek) 11:40-13:20 - Lab3\n\nJedno - kubitowe bramki logiczne\n\n27-11-2023 (poniedziałek) 11:40-13:20 - Lab4\n\nWielokubitowe bramki logiczne\n\n04-12-2023 (poniedziałek) 11:40-13:20 - Lab5\n\nAlgorytm faktoryzacji Shora, przeszukiwanie wg algorytmu Grovera.\n\n11-12-2023 (poniedziałek) 11:40-13:20 - Lab6\n\nKlasyczny i kwantowy perceptron - realizacja w bibliotece qiskit\n\n18-12-2023 (poniedziałek) 11:40-13:20 - Lab7\n\nVariational quantum classifiers - klasyfikacja danych iris\n\n08-01-2024 (poniedziałek) 11:40-13:20 - Lab8\n\nklasyfikacja danych MNIST z wykorzystaniem biblioteki PyTorch Quantum\n\n15-01-2024 (poniedziałek) 11:40-13:20 - Lab9\n\nAlgorytm qPCA z wykorzystaniem do modelowania cen instrumentów finansowych\n\n22-01-2024 (poniedziałek) 11:40-13:20 - Lab10\n\nRealizacje kwantowych sztucznych sieci neuronowych - wprowadzenie"
  },
  {
    "objectID": "index.html#technologie",
    "href": "index.html#technologie",
    "title": "Informacje ogólne",
    "section": "Technologie",
    "text": "Technologie\nUczestnicząc w zajęciach musisz opanować i przynajmniej w podstawowym zakresie posługiwać się następującymi technologiami informatycznymi:\n\nGIT\nPython, Jupyter notebook, Jupyter lab, Colab\nDocker"
  },
  {
    "objectID": "index.html#qpoland",
    "href": "index.html#qpoland",
    "title": "Informacje ogólne",
    "section": "QPoland",
    "text": "QPoland\nQPoland jest cześcią międzynarodowej sieci QWorld.\n\nQWorld is a global network of individuals, groups, and communities collaborating on education and implementation of quantum technologies and research activities."
  },
  {
    "objectID": "sylabus.html",
    "href": "sylabus.html",
    "title": "Sylabus",
    "section": "",
    "text": "Nazwa przedmiotu: Wstęp do kwantowego uczenia maszynowego\nJednostka: SGH w Warszawie\nKod przedmiotu: 232530-D, 232530-S\nPunkty ECTS: 3\nJęzyk prowadzenia: polski\nPoziom przedmiotu: średnio-zaawansowany\nProwadzący: Sebastian Zając, sebastian.zajac@sgh.waw.pl\nWebsite: https://sebkaz-teaching.github.io/intro_to_qml/"
  },
  {
    "objectID": "sylabus.html#cel-przedmiotu",
    "href": "sylabus.html#cel-przedmiotu",
    "title": "Sylabus",
    "section": "Cel Przedmiotu",
    "text": "Cel Przedmiotu\nJeszcze do niedawna rozwój technologiczny oparty był na zmniejszaniu rozmiaru tranzystorów i zwiększaniu mocy obliczeniowej procesorów. Ze względu na fizyczne aspekty natury proces ten, od pewnego momentu, musi uwzględniać ograniczenia fizyki kwantowej. Przyszłość może jednak wykorzystać inne narzędzia, których możliwości wykraczają poza klasyczne moce obliczeniowe. Mimo, iż konstrukcja komputerów kwantowych to wciąż etap inżynierski, to okazuje się, że można już wskazać i wykorzystać je do tworzenia algorytmów, które można wykorzystać w dziedzinie uczenia maszynowego. Wykorzystanie algorytmów kwantowych pozwala zmniejszyć czas przetwarzania dużej ilości danych, a tym samym rozszerza możliwości przetwarzania i modelowania danych. Przedstawione na zajęciach biblioteki - IBM qiskit czy Pennylane (python) pozwalają na prostą i szybką konstrukcje dowolnego algorytmu kwantowego. Algorytmy te, jak np. algorytm Grovera wykorzystać można do wielu problemów obliczeniowych uczenia maszynowego bądź do konstrukcji kwantowych sieci neuronowych."
  },
  {
    "objectID": "sylabus.html#program-przedmiotu",
    "href": "sylabus.html#program-przedmiotu",
    "title": "Sylabus",
    "section": "Program przedmiotu",
    "text": "Program przedmiotu\n\nEfekty kształcenia\nWiedza:\n\n\nZna i rozumie koncepcje działania komputera klasycznego i kwantowego\nZna metody kwantowego uczenia maszynowego możliwe do wykorzystania w biznesie\nRozumie potrzebę i możliwości zastosowania komputerów kwantowych\n\n\nUmiejętności:\n\n\nPotrafi stworzyć proste algorytmy z wykorzystaniem kwantowych bramek logicznych\nUmie wykorzystać biblioteki pythonowe do generowania kodów obliczeń kwantowych\nPotrafi wykorzystać metody nadzorowane wykorzystywane w kwantowym uczeniu maszynowym\nPotrafi wykorzystać metody nienadzorowane wykorzystywane w kwantowym uczeniu maszynowym\nUmie stworzyć prostą kwantową sieć neuronową\n\n\nKompetencje społeczne:\n\n\nformułuje problem biznesowy wraz z jego informatycznym rozwiązaniem\nuzupełniania wiedzę teoretyczną jak i praktyczną, w zakresie teorii, programowania, modelowania, nowych technologii informatycznych z wykorzystaniem kwantowego uczenia maszynowego"
  },
  {
    "objectID": "sylabus.html#realizacja-przedmiotu",
    "href": "sylabus.html#realizacja-przedmiotu",
    "title": "Sylabus",
    "section": "Realizacja przedmiotu",
    "text": "Realizacja przedmiotu\n\negzamin testowy: 40%\nkolokwium: 20%\nreferaty/eseje: 40%"
  },
  {
    "objectID": "sylabus.html#literatura",
    "href": "sylabus.html#literatura",
    "title": "Sylabus",
    "section": "Literatura",
    "text": "Literatura\n\nM. Schuld, F. Petruccione - Supervised Learning with Quantum Computers, Quantum Science and Technology. Springer 2018 https://doi.org/10.1007/978-3-319-96424-9\nC. Bernhardt - Obliczenia kwantowe dla każdego, Wydawnictwo Naukowe PWN 2020\nE. R. Johnston, N. Harrigan, M.Gimeno-Segovia - Komputer kwantowy.Programowanie, algorytmy, kod. Helion 2020\nS. Zajac - Modelowanie dla Biznesu. Analiza danych w czasie rzeczywistym. Oficyna Wydawnicza SGH. 2021\nA. K. Bishwas, A. Nani, V. Palade “Quantum Supervised Clustering Algorithm for Big Data” 2018- 3rd International Conference for Convergence in Technology.\nC. Ciliberto er al. “Statistical limits of supervised quantum learning” Physical Review A 102. 4. 2020\nN Wiebe, A. Kapoor, K M. Svore “Quantum perceptron models” NIPS’16 Procedings of the 30th Internationa Conference on Neural information processing Systems. Vol. 29. 2016"
  },
  {
    "objectID": "sylabus.html#literatura-uzupełniająca",
    "href": "sylabus.html#literatura-uzupełniająca",
    "title": "Sylabus",
    "section": "Literatura uzupełniająca",
    "text": "Literatura uzupełniająca\n\nMichael A. Nielsen & Isaac L. Chuang - Quantum Computation and Quantum Information, Cambridge University Press, 2010\nK. Przanowski, S. Zając - Modelowanie dla Biznesu. Metody Machine learning, Modele portfela consumer finance, modelek rekurencyjne analizy przeżycia, modele scoringowe. Oficyna Wydawnicza SGH. 2020\nE. Frątczak - Modelowanie dla Biznesu. Regresja Logistyczna, Regresja Poissona, Survival Data Mining, CRM, Credit Scoring. Oficyna Wydawnicza SGH. 2019"
  },
  {
    "objectID": "ksiazki.html",
    "href": "ksiazki.html",
    "title": "Książki i strony WWW",
    "section": "",
    "text": "Chris Bernhardt, Obliczenia kwantowe dla każdego. PWN 2020\n\n\nWyjaśnienie jak to działa w obliczeniach kwantowych.\n\n\nMichel Le Bellac, Wstęp do informatyki kwantowej. PWN 2011\n\n\nTrudniejsza, dużo matematyki i fizyki.\n\n\nThomas G. Wong, Introduction to Classical and Quantum Computing. Rooted Grove 2022.\n\n\nBardzo dobra!, dużo przykładów, dużo ciekawych informacji wyjaśnianych bardzo szczegółowo.\n\n\nA. Jacquier, O. Kondratyev, Quantum Machine Learning and Optimisation in Finance. On the Road to Quantum Advantage.\nP. Gawron, M. Cholewa, … Rewolucja stanu. Fantastyczne wprowadzenie do informatyki kwantowej. Quantumz.io 2021\n\n\n\n\n\n\n\nL. Moroney, Sztuczna inteligencja i uczenie maszynowe dla programistów. Praktyczny przewodnik po sztucznej inteligencji. Helion 2021. Zobacz opis lub Kup e-book\nBruce, Bruce, Gedeck, Statystyka praktyczna w data science. Wydanie II. Helion. 2021."
  },
  {
    "objectID": "ksiazki.html#książki",
    "href": "ksiazki.html#książki",
    "title": "Książki i strony WWW",
    "section": "",
    "text": "Chris Bernhardt, Obliczenia kwantowe dla każdego. PWN 2020\n\n\nWyjaśnienie jak to działa w obliczeniach kwantowych.\n\n\nMichel Le Bellac, Wstęp do informatyki kwantowej. PWN 2011\n\n\nTrudniejsza, dużo matematyki i fizyki.\n\n\nThomas G. Wong, Introduction to Classical and Quantum Computing. Rooted Grove 2022.\n\n\nBardzo dobra!, dużo przykładów, dużo ciekawych informacji wyjaśnianych bardzo szczegółowo.\n\n\nA. Jacquier, O. Kondratyev, Quantum Machine Learning and Optimisation in Finance. On the Road to Quantum Advantage.\nP. Gawron, M. Cholewa, … Rewolucja stanu. Fantastyczne wprowadzenie do informatyki kwantowej. Quantumz.io 2021\n\n\n\n\n\n\n\nL. Moroney, Sztuczna inteligencja i uczenie maszynowe dla programistów. Praktyczny przewodnik po sztucznej inteligencji. Helion 2021. Zobacz opis lub Kup e-book\nBruce, Bruce, Gedeck, Statystyka praktyczna w data science. Wydanie II. Helion. 2021."
  },
  {
    "objectID": "ksiazki.html#strony-www",
    "href": "ksiazki.html#strony-www",
    "title": "Książki i strony WWW",
    "section": "Strony WWW",
    "text": "Strony WWW\n\nPeter Shor Wykład\n\n\nPakiety Python\n\nQiskit\nPennyLane\n\n\n\nPakiety Julia\n\nYao\nQAOA\n\n\n\nEdytory tekstu\n\nNotepad++\nSublime Text\nVisual Studio Code\n\n\n\nMarkdown\n\nMD\n\n\n\nFilmy\n\nWprowadzenie do obliczeń kwantowych\nQPoland, Bronze, Warsztaty z programowania komputerów kwantowych 2023"
  },
  {
    "objectID": "info.html",
    "href": "info.html",
    "title": "Narzędzia",
    "section": "",
    "text": "W terminalu (Windows CMD) wpisz\npython\nJeśli nie odnaleziono komendy uruchom polecenie:\npython3\nZwróć uwagę, aby Twoja wersja nie była niższa niż 3.X Aby wyjść z powłoki pythona użyj funkcji exit()\nPython 3.10.9 (main, Dec 15 2022, 17:11:09) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; exit()\n\n\npython3 -m venv &lt;name of env&gt;\n\nsource &lt;name of env&gt;/bin/activate\n# . env/bin/activate\n\n(venv)$ \nJak uruchomić środowisko pythona w systemie Windows.\nSzybka instalacja podstawowych bibliotek i jupyterlab.\npip install --no-cache --upgrade pip setuptools\n\npip install jupyterlab numpy pandas matplotlib scipy\n# jeśli masz plik requirements.txt z potrzebnymi bibliotekami\npip install -r requirements.txt\n# uruchom \njupyterlab\nW przeglądarce internetowej wpisz: localhost:8888\nPo ponownym uruchomieniu przejdź do katalogu w którym utworzyłeś środowisko, następnie uruchom środowisko i jupyterlab.\nsource &lt;name of env&gt;/bin/activate\njupyterlab\n\n\n\nKurs podstaw pythona Tomas Beuzen polecam.\nUtwórz konto na Kaggle, przejdź do zakładki Courses i przerób cały moduł Pythona. Zawiera on:\n\nwyrażenia i zmienne\nfunkcje\nwarunki i flow programu\nlisty\npętle\nstringi i słowniki\ndodawanie i używanie zewnętrznych bibliotek"
  },
  {
    "objectID": "info.html#python",
    "href": "info.html#python",
    "title": "Narzędzia",
    "section": "",
    "text": "W terminalu (Windows CMD) wpisz\npython\nJeśli nie odnaleziono komendy uruchom polecenie:\npython3\nZwróć uwagę, aby Twoja wersja nie była niższa niż 3.X Aby wyjść z powłoki pythona użyj funkcji exit()\nPython 3.10.9 (main, Dec 15 2022, 17:11:09) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; exit()\n\n\npython3 -m venv &lt;name of env&gt;\n\nsource &lt;name of env&gt;/bin/activate\n# . env/bin/activate\n\n(venv)$ \nJak uruchomić środowisko pythona w systemie Windows.\nSzybka instalacja podstawowych bibliotek i jupyterlab.\npip install --no-cache --upgrade pip setuptools\n\npip install jupyterlab numpy pandas matplotlib scipy\n# jeśli masz plik requirements.txt z potrzebnymi bibliotekami\npip install -r requirements.txt\n# uruchom \njupyterlab\nW przeglądarce internetowej wpisz: localhost:8888\nPo ponownym uruchomieniu przejdź do katalogu w którym utworzyłeś środowisko, następnie uruchom środowisko i jupyterlab.\nsource &lt;name of env&gt;/bin/activate\njupyterlab\n\n\n\nKurs podstaw pythona Tomas Beuzen polecam.\nUtwórz konto na Kaggle, przejdź do zakładki Courses i przerób cały moduł Pythona. Zawiera on:\n\nwyrażenia i zmienne\nfunkcje\nwarunki i flow programu\nlisty\npętle\nstringi i słowniki\ndodawanie i używanie zewnętrznych bibliotek"
  },
  {
    "objectID": "info.html#zacznij-korzystać-z-serwisu-github",
    "href": "info.html#zacznij-korzystać-z-serwisu-github",
    "title": "Narzędzia",
    "section": "Zacznij korzystać z serwisu GitHub",
    "text": "Zacznij korzystać z serwisu GitHub\n\n\n\nTekst na podstawie strony jak korzystać z serwisu github\nPracując nad projektem np. praca magisterska, (samodzielnie lub w zespole) często potrzebujesz sprawdzić jakie zmiany, kiedy i przez kogo zostały wprowadzone do projektu. W zadaniu tym świetnie sprawdza się system kontroli wersji czyli GIT.\nGit możesz pobrać i zainstalować jak zwykły program na dowolnym komputerze. Jednak najczęściej (małe projekty) korzysta się z serwisów z jakimś systemem git. Jednym z najbardziej rozpoznawanych jest GitHub dzięki któremu możesz korzystać z systemu git bez jego instalacji na swoim komputerze.\nW darmowej wersji serwisu GitHub swoje pliki możesz przechowywać w publicznych (dostęp mają wszyscy) repozytoriach.\nSkupimy się wyłącznie na darmowej wersji serwisu GitHub.\ngit --version\n\nStruktura GitHuba\nNa najwyższym poziomie znajdują się konta indywidualne (np http://github.com/sebkaz, bądź zakładane przez organizacje. Użytkownicy indywidualni mogą tworzyć repozytoria publiczne (public ) bądź prywatne (private).\nJeden plik nie powinien przekraczać 100 MB.\nRepo (skrót do repozytorium) tworzymy za pomocą Create a new repository. Każde repo powinno mieć swoją indywidualną nazwę.\n\n\nBranche\nGłówna (tworzona domyślnie) gałąź rapozytorium ma nazwę master.\n\n\nNajważniejsze polecnia do zapamiętania\n\nściąganie repozytorium z sieci\n\ngit clone https://adres_repo.git\n\nW przypadku githuba możesz pobrać repozytorium jako plik zip.\n\n\nTworzenie repozytorium dla lokalnego katalogu\n\n# tworzenie nowego katalogu\nmkdir datamining\n# przejście do katalogu\ncd datamining\n# inicjalizacja repozytorium w katalogu\ngit init\n# powinien pojawić się ukryty katalog .git\n# dodajmy plik\necho \"Info \" &gt;&gt; README.md\n\nPołącz lokalne repozytorium z kontem na githubie\n\ngit remote add origin https://github.com/&lt;twojGit&gt;/nazwa.git\n\nObsługa w 3 krokach\n\n# sprawdź zmiany jakie zostały dokonane\ngit status\n# 1. dodaj wszystkie zmiany\ngit add .\n# 2. zapisz bierzący stan wraz z informacją co zrobiłeś\ngit commit -m \" opis \"\n# 3. potem już zostaje tylko\ngit push origin master\nWarto obejrzeć Youtube course.\nCiekawe i proste wprowadzenie mozna znaleźć tutaj"
  },
  {
    "objectID": "info.html#zacznij-korzystać-z-dockera",
    "href": "info.html#zacznij-korzystać-z-dockera",
    "title": "Narzędzia",
    "section": "Zacznij korzystać z Dockera",
    "text": "Zacznij korzystać z Dockera\n\n\n\nW celu pobrania oprogramowania docker na swój system przejdź do strony.\nJeżli wszystko zainstalowało się prawidłowo wykonaj następujące polecenia:\n\nSprawdź zainstalowaną wersję\n\ndocker --version\n\nŚciągnij i uruchom obraz Hello World i\n\ndocker run hello-world\n\nPrzegląd ściągnietych obrazów:\n\ndocker image ls\n\ndocker images\n\nPrzegląd uruchomionych kontenerów:\n\ndocker ps \n\ndocker ps -all\n\nZatrzymanie uruchomionego kontenera:\n\ndocker stop &lt;CONTAINER ID&gt;\n\nUsunięcie kontenera\n\ndocker rm -f &lt;CONTAINER ID&gt;\nPolecam również krótkie intro"
  },
  {
    "objectID": "cwiczenia/qiskitML.html",
    "href": "cwiczenia/qiskitML.html",
    "title": "Qiskit Machine Learning",
    "section": "",
    "text": "dokumentacja\n\nQuantum Kernels (Quantum Support Vector Classifier, Quantum Support Vector Regressor)\nQuantum Neural Networks (Variational Quantum Classifier, Variational Quantum Regressor), fature map (ZZFeatureMap, ZFeatureMap, PauliFeatureMap) i ansatz (RealAmplitudes, EfficientSU2, ZZFeatureMap, ZFeatureMap, PauliFeatureMap). Posiada również konektor do PyTorcha.\n\nużywane do klasyfikacji (QSVC) i regresjii (QSVR). Pozwalają na używanie kwantowego uczenia maszynowego bez wiedzy o obliczeniach kwantowych.\n\n# instalacja \n!pip install --upgrade pip\n!pip install qiskit-machine-learning\n!pip install 'qiskit-machine-learning[torch]'\n!pip install 'qiskit-machine-learning[sparse]' \n# !pip install ipywidgets ipykernel\n\n\nimport qiskit.tools.jupyter\n\n%qiskit_version_table\n\nVersion Information\n\n\n\nSoftware\nVersion\n\n\nqiskit\nNone\n\n\nqiskit-terra\n0.25.2\n\n\nSystem information\n\n\nPython version\n3.10.12\n\n\nPython compiler\nClang 14.0.3 (clang-1403.0.22.14.1)\n\n\nPython build\nmain, Jul 28 2023 18:34:01\n\n\nOS\nDarwin\n\n\nCPUs\n8\n\n\nMemory (Gb)\n16.0\n\n\nSun Oct 15 20:37:42 2023 CEST"
  },
  {
    "objectID": "lectures/wyklad3.html",
    "href": "lectures/wyklad3.html",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "",
    "text": "\\[\n\\newcommand{\\bra}[1]{\\left \\langle #1 \\right \\rvert}\n\\newcommand{\\ket}[1]{\\left \\rvert #1 \\right \\rangle}\n\\newcommand{\\braket}[2]{\\left \\langle #1 \\middle \\rvert #2 \\right \\rangle}\n\\]\nMechanika opiera się na algebrze liniowej. W ogólności teoria ta posługuje się pojęciem nieskończenie wymiarowej przestrzeni liniowej. Na szczęście do opisu kubitów (2-dim) i układów kwantowych (\\(2^{n}\\)-dim) wystarczy nam pojęcie skończenie wymiarowej przestrzeni wektorowej. Bardzo upraszcza nam to naukę o kwantowym uczeniu maszynowym, gdyż wiele problemów matematycznych (dla fizyków) tutaj nie występuje. Upraszcza to również ilość potrzebnych matematycznych pojęć.\nBędziemy posługiwali się notacją Diraca, jednego z twórców mechaniki kwantowej. W książce Ch.Bernhardta “Obliczenia kwantowe dla każdego” autor rezygnuje z liczb zespolonych, na rzecz liczb rzeczywistych. O ile podejście takie sprawdza się na poziomie opisu o tyle dla pełnego zrozumienia posługiwanie się liczbami zespolonymi jest niezbędne."
  },
  {
    "objectID": "lectures/wyklad3.html#liczby-rzeczywiste-i-zespolone---przypomnienie",
    "href": "lectures/wyklad3.html#liczby-rzeczywiste-i-zespolone---przypomnienie",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Liczby rzeczywiste i zespolone - przypomnienie",
    "text": "Liczby rzeczywiste i zespolone - przypomnienie\nLiczby to matematyczne, abstrakcyjne pojęcie wywodzące się z teorii mnogości (zbiorów). Przykładowo liczba 42 zapisywana w postaci zapisu dziesiętnego lub binarnego \\(42=101010_2\\). Można oczywiście znaleźć 42 przedmioty i je przeliczyć jednak w naszym przypadku skupimy się na abstrakcyjnym pojęciu niezależnym od jego reprezentacji. Liczba 42 jest liczbą naturalną. Zbiór liczb naturalnych oznaczamy jako \\(\\mathbb{N}\\). Identyczne własności abstrakcji mają liczby całkowite \\(\\mathbb{Z}\\), wymierne \\(\\mathbb{Q}\\), rzeczywiste \\(\\mathbb{R}\\) i zespolone \\(\\mathbb{C}\\). Nie możemy liczb zobaczyć czy dotknąć, ale możemy na nich wykonywać operacje matematyczne. Liczby zespolone nie są bardziej abstrakcyjne niż liczby rzeczywiste, czy naturalne.\nLiczba zespolona (we współrzędnych Kartezjańskich) \\(z=x + i y\\) składa się z części rzeczywistej \\(R(z)=x\\) i urojonej \\(I(z)=y\\). gdzie \\[i^2=-1\\].\n\\[1+i\\sqrt{3}\\] \\(R(z)=1\\) i \\(I(z)=\\sqrt{3}\\).\nKażdą liczbę zespoloną możemy zapisać w postaci polarnej \\(z=r e^{i \\theta}\\), gdzie \\(r=|z|\\) to moduł liczby zespolonej, a \\(\\theta\\) to jej argument. \\[ z = r e^{i \\theta} = r (\\cos{\\theta} + i \\sin{\\theta})\\] gdzie: \\[r = |z| = \\sqrt{x^2 + y^2}\\] \\[\\theta = \\arctan{\\frac{y}{x}}\\] Natomiast: \\[x = r \\cos{\\theta}\\] \\[y = r \\sin{\\theta}\\]\nDla naszego przykładu: \\[1+i\\sqrt{3} = 2 e^{i \\frac{\\pi}{3}}\\]\n\nUdowodnij samodzielnie, że powyższe równanie jest prawdziwe.\n\nLiczba sprzężona do liczby zespolonej \\(z=x + i y\\) to \\(z^*=x - i y = r*e^{-i \\theta}\\).\nNorma liczby zespolonej \\(z=x + i y\\) to \\(|z|=\\sqrt{x^2 + y^2}=r\\).\nKwadrat normy liczby zespolonej \\(z=x + i y\\) to \\(|z|^2=x^2 + y^2=r^2\\). Można go również zapisać jako \\(|z|=z z^* = z^* z\\).\n\nUdowodnij w kartezjańskim i polarnym układzie oniesienia.\n\nDodawanie licz zespolonych jest zdefiniowane jako dodawanie poszczególnych składników.\n\nile wynosi \\(z_1 z_2\\)?\n\n\nile wynosi \\(\\frac{z_1}{z_2}\\)"
  },
  {
    "objectID": "lectures/wyklad3.html#wektory-i-przestrzenie-wektorowe",
    "href": "lectures/wyklad3.html#wektory-i-przestrzenie-wektorowe",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Wektory i przestrzenie wektorowe",
    "text": "Wektory i przestrzenie wektorowe\nNiech dany będzie zbiór \\(\\mathbb{V}\\) oraz zbiór \\(\\mathbb{K}\\). Elementy zbioru \\(\\mathbb{V}\\) można ze sobą dodawać i mnożyć przez elementy zbioru \\(\\mathbb{K}\\). Wraz z dodatkowymi opracjami (zdefiniowanymi poniżej) zbiór ten będziemy nazwywali przestrzenią wektorową. Jej elementy to wektory.\nUwaga wektory będziemy oznaczać jako \\(\\ket{v}\\). Będą to kolekcje liczb. Jeśli liczby te będą rzeczywiste to będziemy mówić o przestrzeni wektorowej rzeczywistej. Natomiast jeśli liczby te będą zespolone to będziemy mówić o przestrzeni wektorowej zespolonej.\nMyśląc o wektorach często wyobrażamy je sobie jako strzałki w przestrzeni. Tak nas nauczono jednak nie jest to prawdziwe. Na tych zajęciach wektory będą reprezentowane jako abstrakcyjne elementy przestrzeni wektorowej. Warto jednak pamiętać, że wszystkie własności (algebraiczne) wektorów są również spełnione dla strzałek.\n\nWłasności\n\nIstnieje szczególny (i jedyny) wektor \\(\\ket{0}\\) zerowy. Niech \\(\\ket{v}\\) , \\(\\ket{u}\\), \\(\\ket{z}\\) będą dowolnymi wektorami, natomiast \\(\\alpha\\) i \\(\\beta\\) dowolnymi liczbami.\nDodawanie wektorów jest przemienne: \\[\\ket{v} + \\ket{u} = \\ket{u} + \\ket{v}\\]\nDodawanie wektorów jest łączne: \\[\\ket{v} + (\\ket{u} + \\ket{z}) = (\\ket{v} + \\ket{u}) + \\ket{z}\\]\nIstnieje szczególny (i jedyny) wektor \\(\\ket{v}\\) odwrotny do wektora \\(\\ket{u}\\): \\[\\ket{v} + \\ket{u} = \\ket{0}\\]\nDla każdego wektora \\(\\ket{v}\\) zachodzi: \\[\\ket{v} + \\ket{0} = \\ket{0} + \\ket{v} = \\ket{v}\\]\n1*wektor = wektor: \\[1 \\ket{v} = \\ket{v}\\]\nłączność mnożenia przez skalar: \\[\\alpha (\\beta \\ket{v}) = (\\alpha \\beta) \\ket{v}\\]\nRozdzielność mnożenia przez skalar względem dodawania wektorów: \\[\\alpha (\\ket{v} + \\ket{u}) = \\alpha \\ket{v} + \\alpha \\ket{u}\\]\nRozdzielność dodawania skalarów względem mnożenia przez wektor: \\[(\\alpha + \\beta) \\ket{v} = \\alpha \\ket{v} + \\beta \\ket{v}\\]\n\n\n\nWektory kolumnowe\nZapiszmy pionową jednokolumnową tablicę liczb: \\[ \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix} \\]\nMnożenie przez liczbę: \\[ \\alpha \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix} = \\begin{bmatrix} \\alpha x_1 \\\\ \\alpha x_2 \\\\ .\\\\ \\alpha x_n \\end{bmatrix} \\]\nDodawanie kolumn: \\[ \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix} + \\begin{bmatrix} y_1 \\\\ y_2 \\\\ .\\\\ y_n \\end{bmatrix} = \\begin{bmatrix} x_1+y_1 \\\\ x_2+y_2 \\\\ .\\\\ x_n+y_n \\end{bmatrix}\\]\nPozwala to otrzymać konkretną reprezentację wektorów, które będziemy oznaczać w notacji Diraca przez “ket” \\(\\ket{.}\\).\n\n\nWektory wierszowe\n\\[ \\begin{bmatrix} x_1  x_2 \\dots x_n \\end{bmatrix}\\]. Analogicznie do poprzedniego przykładu łatwo określić jak dodawać je ze sobą i mnożyć przez liczbę. W notacji Diraca będziemy takie wektory oznaczali przez “bra” \\(\\bra{.}\\).\n\n\nTranspozycja i sprzężenie Hermitowskie.\nTranspozycja \\(T\\) Zamienia wektory wierszowe na kolumnowe i odwrotnie. Natomiast sprzężenie hermitowskie \\(\\dagger\\) dodatkowo dodaje sprzężenie zespolone.\n\\[\\ket{u}^{\\dagger} = \\bra{u}\\] \\[\\bra{u}^{\\dagger} = \\ket{u}\\]\n\n\nIloczyn skalarny\nIloczynem skalarnym dwóch wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\) nazywany funkcję, która zwraca liczbę.\n\n\\(\\braket{u}{v} = \\braket{v}{u}^{\\ast}\\)\n\\((\\alpha \\bra{u})\\ket{v} = \\alpha \\braket{u}{v}\\)\n\\((\\bra{u} + \\bra{v}) \\ket{z} = \\braket{u}{z} +\\braket{v}{z}\\)\n\\(\\braket{u}{u} &gt; 0\\)\n\\(\\braket{u}{u} = 0, gdy \\ket{u}=\\ket{0}\\)\n\nDla dwóch wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\) otrzymujemy: \\[ \\ket{u} = \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix}, \\ket{v} = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ .\\\\ y_n \\end{bmatrix} \\]\n\\[ \\braket{u}{v} = x_1^{*}y_1 +x_2^{*}y_2 + \\dots + x_n^{*}y_n\\]\n\n\nKombinacja liniowa wektorów\nDla dwóch wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\) oraz dwóch liczb \\(\\alpha\\), \\(\\beta\\) możemy stworzyć nowy wektor: \\[\\ket{z} = \\alpha \\ket{u} + \\beta \\ket{v}\\] Wektor ten nazywamy kombinacją liniową wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\)."
  },
  {
    "objectID": "lectures/wyklad3.html#formalizm-matematyczny-obliczeń-kwantowych",
    "href": "lectures/wyklad3.html#formalizm-matematyczny-obliczeń-kwantowych",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Formalizm matematyczny obliczeń kwantowych",
    "text": "Formalizm matematyczny obliczeń kwantowych\nTa wiedza wystarczy do wyjaśnienia notacji Diraca.\nIloczyn skalarny \\(\\braket{\\psi}{\\phi}\\) wektorów \\(\\ket{\\psi}\\) i \\(\\ket{\\phi}\\) czytamy jako braket u v."
  },
  {
    "objectID": "lectures/wyklad3.html#stan",
    "href": "lectures/wyklad3.html#stan",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Stan",
    "text": "Stan\nStanem w mechanice kwantowej nazywamy wektor:\n\\[\\ket{\\psi} = x_0 \\ket{0} + x_1 \\ket{1} + \\dots x_{n-1} \\ket{n-1}\\]\nChcemy aby współczynniki \\(x_i\\) były liczbami zespolonymi a cały wektor był unormowany do 1.\nLiczby \\(x_i\\) nazywamy amplitudami prawdopodobieństwa stanu kwantowego. Jeśli przynajmniej dwie liczby \\(x_i\\) są niezerowe, to układ znajduje się w superpozycji stanów.\n\nKubit\nElementarnym obiektem w informatyce kwantowej jest kubit, który realizowany jest jako dwu wymiarowy układ kwantowy. Stan kwantowy kubitu opisuje wektor w przestrzeni liniowej \\(\\mathbb{C}^2\\).\nW celu wykonywania obliczeń i opisu stanu kubitu wybierzemy tzw. bazę obliczeniową: \\[\\ket{0} = \\begin{bmatrix} 1 \\\\ 0  \\end{bmatrix} , \\ket{1} = \\begin{bmatrix} 0 \\\\ 1  \\end{bmatrix}\\]\nTo co wyróżnia kubit w porównaniu do klasycznego bitu dowolny stan \\(\\ket{\\psi}\\) może być superpozycją stanów bazowych: \\[\\ket{\\psi} = \\alpha \\ket{0} + \\beta \\ket{1}\\] dla którego zachodzi warunek normalizacji: \\[\\braket{\\psi}{\\psi} = |\\alpha|^2 + |\\beta|^2 = 1\\] i \\(\\alpha, \\beta \\in \\mathbb{C}\\).\nLiczby \\(\\alpha\\) i \\(\\beta\\) są zespolone, zatem potrzeba 4 liczb rzeczywistych aby je opisać. Ze względu na warunek normalizacji wystarczą 3 liczby rzeczywiste. Czwartą liczbę możemy obliczyć.\nStan kubitu możemy zapisać w postaci: \\[\\ket{\\psi} = e^{i \\gamma}\\left( \\cos{\\frac{\\theta}{2}} \\ket{0} + e^{i \\phi} \\sin{\\frac{\\theta}{2}} \\ket{1} \\right)\\] gdzie \\(\\theta \\in [0, \\pi]\\), \\(\\phi \\in [0, 2\\pi]\\) i \\(\\gamma \\in [0, 2\\pi]\\) są liczbami rzeczywistymi.\nWspółczynnik \\(e^{i \\gamma}\\) nazywamy fazą globalną. Ze względu, iż analizować będziemy kwadraty amplitud prawdopodobieństwa to faza globalna nie ma znaczenia. Dlatego możemy napisać: \\[\\ket{\\psi} = \\cos{\\frac{\\theta}{2}} \\ket{0} + e^{i \\phi} \\sin{\\frac{\\theta}{2}} \\ket{1}\\]\nWarto zauważyć, że dwa dowolne stany kubitów \\(\\ket{\\psi}\\) i \\(\\ket{\\phi}\\) różnią się o czynnik fazowy \\(e^{i \\gamma}\\) to stany te dają identyczne wyniki.\nLiczby rzeczywiste \\(\\theta\\) i \\(\\phi\\) nazywamy kątami kubitu i możemy interpretować je jako współrzędne na sferze Blocha. Bardzo często będziemy wykorzystywać ją do wizualizacji stanów kubitów."
  }
]