[
  {
    "objectID": "lectures/wyklad5.html",
    "href": "lectures/wyklad5.html",
    "title": "Kwantowe uczenie maszynowe",
    "section": "",
    "text": "Parametryzowany Obwód Kwantowy (PQC) to typ obwodu kwantowego, który wykorzystuje parametry klasyczne. Te obwody są kluczowym elementem wariacyjnych algorytmów kwantowych, które są klasą algorytmów kwantowych wykorzystujących klasyczne techniki optymalizacji do znalezienia optymalnych parametrów dla obwodu kwantowego.\nStruktura PQC jest zazwyczaj stała i składa się z serii bramek kwantowych. Parametry tych bramek, jednak, mogą być dostosowane. Pozwala to na dostrojenie obwodu do rozwiązania konkretnego problemu. Parametry są zazwyczaj optymalizowane za pomocą klasycznego algorytmu optymalizacji, z celem znalezienia zestawu parametrów, które minimalizują pewną funkcję kosztu.\nPQC są szczególnie przydatne w kwantowym uczeniu maszynowym, gdzie mogą być używane do konstrukcji kwantowych sieci neuronowych. Te sieci mogą być trenowane w podobny sposób do klasycznych sieci neuronowych, poprzez dostosowywanie parametrów bramek kwantowych do minimalizacji funkcji kosztu.\nPodsumowując, Parametryzowane Obwody Kwantowe są potężnym narzędziem w dziedzinie informatyki kwantowej, umożliwiając integrację klasycznych technik optymalizacji z obliczeniami kwantowymi. Są kluczowym elementem wielu algorytmów kwantowych i mają szeroki zakres zastosowań, od kwantowego uczenia maszynowego po chemię kwantową.\nOto prosty przykład PQC w Pythonie za pomocą biblioteki Qiskit:\nfrom qiskit import QuantumCircuit\n\n# Utwórz Parametryzowany Obwód Kwantowy z 2 kubitami\nqc = QuantumCircuit(2)\n\n# Dodaj parametryzowaną bramkę\nfrom qiskit.circuit import Parameter\ntheta = Parameter('θ')\nqc.rx(theta, 0)\n\n# Wyświetl obwód\nprint(qc)\nW tym przykładzie tworzymy obwód kwantowy z dwoma kubitami i dodajemy parametryzowaną bramkę RX do pierwszego kubitu. Parametr ‘θ’ może być dostosowany do zmiany zachowania obwodu.\n//TODO dodac info o VQE"
  },
  {
    "objectID": "lectures/wyklad5.html#parameterized-quantum-circuit",
    "href": "lectures/wyklad5.html#parameterized-quantum-circuit",
    "title": "Kwantowe uczenie maszynowe",
    "section": "",
    "text": "Parametryzowany Obwód Kwantowy (PQC) to typ obwodu kwantowego, który wykorzystuje parametry klasyczne. Te obwody są kluczowym elementem wariacyjnych algorytmów kwantowych, które są klasą algorytmów kwantowych wykorzystujących klasyczne techniki optymalizacji do znalezienia optymalnych parametrów dla obwodu kwantowego.\nStruktura PQC jest zazwyczaj stała i składa się z serii bramek kwantowych. Parametry tych bramek, jednak, mogą być dostosowane. Pozwala to na dostrojenie obwodu do rozwiązania konkretnego problemu. Parametry są zazwyczaj optymalizowane za pomocą klasycznego algorytmu optymalizacji, z celem znalezienia zestawu parametrów, które minimalizują pewną funkcję kosztu.\nPQC są szczególnie przydatne w kwantowym uczeniu maszynowym, gdzie mogą być używane do konstrukcji kwantowych sieci neuronowych. Te sieci mogą być trenowane w podobny sposób do klasycznych sieci neuronowych, poprzez dostosowywanie parametrów bramek kwantowych do minimalizacji funkcji kosztu.\nPodsumowując, Parametryzowane Obwody Kwantowe są potężnym narzędziem w dziedzinie informatyki kwantowej, umożliwiając integrację klasycznych technik optymalizacji z obliczeniami kwantowymi. Są kluczowym elementem wielu algorytmów kwantowych i mają szeroki zakres zastosowań, od kwantowego uczenia maszynowego po chemię kwantową.\nOto prosty przykład PQC w Pythonie za pomocą biblioteki Qiskit:\nfrom qiskit import QuantumCircuit\n\n# Utwórz Parametryzowany Obwód Kwantowy z 2 kubitami\nqc = QuantumCircuit(2)\n\n# Dodaj parametryzowaną bramkę\nfrom qiskit.circuit import Parameter\ntheta = Parameter('θ')\nqc.rx(theta, 0)\n\n# Wyświetl obwód\nprint(qc)\nW tym przykładzie tworzymy obwód kwantowy z dwoma kubitami i dodajemy parametryzowaną bramkę RX do pierwszego kubitu. Parametr ‘θ’ może być dostosowany do zmiany zachowania obwodu.\n//TODO dodac info o VQE"
  },
  {
    "objectID": "lectures/wyklad1.html",
    "href": "lectures/wyklad1.html",
    "title": "Komputery klasyczne i kwantowe.",
    "section": "",
    "text": "Nature isn’t classical, dammit, and if you want to make a simulation of Nature, you’d better make it quantum mechanical, and by golly it’s a wonderful problem because it doesn’t look so easy. Richard Feynman\nQuntum Machine Learning\nCo oznacza termin kwantowe uczenie maszynowe?\nUczenie maszynowe (ale również i uczenie głębokie) to nauka i ,,sztuka’’ opisująca jak sprawić by komputery mogły ,,uczyć się’’ na podstawie danych, tak by rozwiązać problemy, których typowe programowanie nie miałoby sensu (lub byłoby zbyt skomplikowane). Więcej na ten temat znajdziesz w książce\nObliczenia kwantowe opisują przetwarzenie informacji na urządzeniach pracujących zgodnie z zasadami mechaniki kwantowej.\nOba kierunki są istotne w procesie przetwarzania danych obecnie i w niedalekiej przyszłości. Dlatego naturalnym pytaniem jest jak je ze sobą połączyć?\nQML to realizowanie metod uczenia maszynowego, które mogą być wykonywane na komputerach kwantowych.\nKwantowe uczenie maszynowe możemy określić jako uczenie maszynowe realizowane na komputerach kwantowych. Zasadniczym jest pytanie na ile i czy wogóle komputery kwantowe mogą poprawić jakość modeli uczenia maszynowego i czy pozwalają zrealizować coś więcej niż wykorzystanie klasycznych komputerów.\nOdpowiedź To zależy:"
  },
  {
    "objectID": "lectures/wyklad1.html#sztuczna-inteligencja",
    "href": "lectures/wyklad1.html#sztuczna-inteligencja",
    "title": "Komputery klasyczne i kwantowe.",
    "section": "Sztuczna inteligencja",
    "text": "Sztuczna inteligencja\n\nHistoria AI sięga 1950 roku (A. Turing). Rozwój technologii związanych z danymi ustrukturyzowanymi i nieustrukturyzowanymi realizowany np. w:\n\nrozpoznawanie i tworzenie ,,mowy’’\n,,rozumienie’’ obrazów i filmów\nrozgrywanie gier\nrekomendacje\nsystemy diagnostyczne\nplanowanie\npodejmowanie decyzji\nbooty, agenci …\n\nZadania te realizowane są w oparciu o uczenie maszynowe (Machine Learning) i głębokie sieci neuronowe (Deep Learning).\nDlaczego tak chętnie używamy:\n\nWykładniczy wzrost ilości (treningowych) danych dostępnych w social mediach, internecie, aplikacjach mobilnych, IoT.\nWzrost możliwości i spadek ceny (kosztów) jakości sprzętu komputerowego - co-procesory GPU, TPU, …\nOprogramowanie Open Source\nPrzewaga konkurencyjna przedsiębiorstw z AI na firmami bez AI\n\n\n\nUwaga! Zakładam, że znasz podstawowe pojęcia związane z uczeniem maszynowym i głębokim.\n\nUczenie maszynowe (ang. Machine Learning) można podzielić na trzy główne kategorie:\n\nUczenie nadzorowane (ang. supervised learning) - posiadając oznaczone dane \\((x_i, y_i)\\) szukamy funkcji \\(f(x_i) = y_i\\) tak by uogólnić ją na nowe dane. Np. dać kredyt, czy na obrazie jest kot albo pies itp.\nUczenie nienadzorowane (ang. unsupervised learning) - posiadając dane \\((x_i)\\) szukamy struktury w danych.\nUczenie przez wzmacnianie (ang. reinforcement learning) - agent uczy się na podstawie nagród i kar.\nUczenie transferowe () - to technika w uczeniu maszynowym, która polega na wykorzystywaniu wiedzy lub umiejętności nabytej w jednym zadaniu do rozwiązania innych zadań. Uczenie transferowe jest szeroko stosowane w praktyce. Na przykład, model językowy, który nauczył się rozpoznawać język naturalny w jednym zadaniu, może być używany do polepszania innych zadań, takich jak tłumaczenie maszynowe, analiza sentymentu czy rozpoznawanie tekstu pisanego.\nUczenie pół-nadzorowane to podejście, które wykorzystuje zarówno dane oznaczone (gdzie mamy etykiety klas) jak i dane nieoznaczone (gdzie brakuje etykiet) do trenowania modelu."
  },
  {
    "objectID": "lectures/wyklad1.html#klasyczne-komputery",
    "href": "lectures/wyklad1.html#klasyczne-komputery",
    "title": "Komputery klasyczne i kwantowe.",
    "section": "Klasyczne komputery",
    "text": "Klasyczne komputery\nKomputer to fizyczne urządzenie bazujące na obwodach elektronicznych (electronic circuits), które służy do przetwarzania informacji.\n\nAlgorytmy (programy komputerowe - software) to sekwencje logicznych i matematycznych kroków, które określają sposób rozwiązywania problemu lub wykonywania obliczeń przy użyciu komputera. Są to abstrakcyjne przepisy, które programy komputerowe implementują, aby przetwarzać dane i osiągnąć konkretne cele.\n\nMoore’s law An observation that the number of transistors on microchip roughly doubles every two years, whereas its cost is halved over that same timeframe. The growth of microprocessors is exponential\n\nZwiększenie szybkości działania oraz pojemności klasycznych komputerów co dwa lata zmniejszając przy tym koszty. W ostatnich latach obserwujemy, że to prawo zaczyna osiągać swoje ograniczenia, a dalszy wzrost mocy komputerów może być trudniejszy do osiągnięcia w tradycyjny sposób.\n\nFizyczne (klasyczne) ograniczenia dla procesorów\n\nRozmiary tranzystora \\(\\sim\\) rozmiary atomów - lata 90’te \\(500 nm\\) obecnie \\(14 nm\\) i \\(7 nm\\).\nPrędkość światła \\(\\sim\\) max. prędkość przesyłu informacji.\nWysoki koszt wytwarzania (kierunek układów wieloprocesorowych)\nW miarę jak tranzystory stają się coraz mniejsze, zbliżają się do skali wymiarów atomów, co prowadzi do pojawienia się efektów kwantowych, które mogą wpływać na ich zachowanie. Rozwój komputerów kwantowych stanowi próbę obejścia tych ograniczeń.\nWysoki pobór prądu\nW miarę jak komputery stają się bardziej zaawansowane i wykonują bardziej intensywne obliczenia, generują znaczne ilości ciepła. To może prowadzić do problemów z chłodzeniem i wpływać na wydajność. Ograniczenia te wymagają innowacji w zakresie chłodzenia komputerów.\nProdukcja mikroprocesorów i układów scalonych wymaga rzadkich materiałów i zasobów, co może stanowić ograniczenie w kontekście zrównoważonego rozwoju technologii komputerowych.\n\nDla większości praktycznych zastosowań, opis makroskopowy oraz klasyczne teorie są wystarczające do opisu własności prądu w obwodach elektrycznych. Jednakże, gdy naszym celem jest realizacja obliczeń wykorzystujących własności mikroskopowych obiektów, okazuje się, że klasyczny opis przestaje być wystarczający. W takich przypadkach, musimy zwrócić się ku mechanice kwantowej, która jest najlepiej przetestowanym i stosowanym opisem mikroświata, jaki znamy. Komputer, który wykonuje obliczenia zgodnie z zasadami mechaniki kwantowej, nazywamy komputerem kwantowym. Dzięki swojej zdolności do wykorzystania zjawisk kwantowych, takich jak superpozycja i splątanie, komputery kwantowe mogą rozwiązywać problemy, które byłyby trudne lub niemożliwe do rozwiązania za pomocą klasycznych komputerów. Są one obiecującą technologią, która otwiera nowe możliwości w dziedzinie obliczeń i nauki."
  },
  {
    "objectID": "lectures/wyklad1.html#obliczenia-kwantowe",
    "href": "lectures/wyklad1.html#obliczenia-kwantowe",
    "title": "Komputery klasyczne i kwantowe.",
    "section": "Obliczenia kwantowe",
    "text": "Obliczenia kwantowe\n\nFilm wprowadzający: link\n\nTermin Mechanika Kwantowa (MK) jest używany zamiennie z terminem Teoria Kwantowa. Istnieją jednak teorie kwantowe, takie jak Kwantowa Teoria Pola, które wykraczają poza zakres mechanicznej kwantowej.\nMechanika Kwantowa przewiduje wyniki eksperymentów przeprowadzanych na układach kwantowych, tj. mikroskopowych obiektach fizycznych, dla których fizyka klasyczna nie jest wystarczająca. Przykładem może być atom wodoru. Mechanika Kwantowa opisuje zachowanie obiektów takich jak fotony, elektrony lub kwantowe bity (qubity).\nWarto zaznaczyć, że Mechanika Kwantowa jest fundamentem, na którym opiera się wiele innych teorii i dziedzin fizyki. Jest to jedna z najbardziej udowodnionych i sprawdzonych teorii w historii nauki i stanowi podstawę dla zrozumienia mikroświata.\n\nNa naszym wykładzie nie będą interesować nas własności fizyczne kubitów a ograniczymy się do znajomości ich pewnych, abstrakcyjnych stanów w jakich mogą się one znajdować. Stany te numerowane będą liczbami naturalnymi.\n\nFizyka klasyczna jest zazwyczaj rozumiana jako graniczny przypadek Mechaniki Kwantowej (MK). Niemniej jednak, fizycy często starają się oddzielać te dwie dziedziny i stosować odpowiednią teorię do odpowiedniego problemu. Na przykład, w konstrukcji mostów korzysta się z fizyki klasycznej, a nie MK.\nWarto zaznaczyć, że wyniki MK są probabilistyczne, co często prowadzi do błędnego przekonania, że MK jest teorią statystyczną. Niemniej jednak, nie jest to prawda. Mechanikę Kwantową można raczej uznać za uogólnienie klasycznej definicji prawdopodobieństwa.\n\nHistoria MK\nPoczątek Mechaniki Kwantowej związane są z pracami Maxa Plancka (1900) i Alberta Einsteina (1905), którzy wprowadzili pojęcie kwantu - czyli najmniejszej porcji energii. Dalszy rozwój Mechaniki Kwantowej związany jest z badaniami takich naukowców jak Niels Bohr, Erwin Schrödinger, Louis de Broglie, Heisenberg, Dirac, Feynman i wielu innych. Pozostałe informacje możesz znaleźć w artykule o obliczeniach kwantowych\n\nInformatyków (najczęściej) nie interesuje, w jaki sposób właściwości fizyczne układów są Informatycy, najczęściej, nie muszą interesować się tym, w jaki sposób właściwości fizyczne układów są wykorzystywane do przechowywania informacji w komputerze klasycznym. Podobnie, informatycy (oraz analitycy danych) nie muszą się zastanawiać nad fizycznym mechanizmem, za pomocą którego informacja kwantowa jest realizowana w komputerze kwantowym. Czy prowadząc samochód zastanawiasz się, jak dokładnie działają wszystkie jego części? A pisząc kod modelu, zastanawiasz się, jak został on zaimplementowany w bibliotece?” Ta wersja jest bardziej klarowna i wyraża ideę, że informatycy często nie muszą zagłębiać się w szczegóły fizycznej realizacji, skupiając się na wydajnym wykorzystaniu technologii komputerowych.\n\n\n\nHistoria obliczeń kwantowych\n\n1936 Alan Turing opublikował pracę On Computable Numbers, która stanowiła istotny krok w kierunku teoretycznych podstaw obliczeń (Hilbert Problems) - universal computing machine local\n1976 Roman S. Ingarden - Quantum Information Theory Roman S. Ingarden wprowadził pojęcie teorii informacji kwantowej, co miało kluczowe znaczenie dla rozwoju komputerów kwantowych.\n1980 Paul Benioff - Paul Benioff przedstawił teoretyczną koncepcję komputerów kwantowych jako fizycznych systemów, otwierając drzwi do praktycznych implementacji.\n1981 Richard Feynman - zwrócił uwagę na to, że klasyczne komputery nie są w stanie efektywnie symulować procesów kwantowych.\n1985 David Deutsch opracował pierwszy opis kwantowej maszyny Turinga i algorytmów przeznaczonych do uruchamiania na komputerach kwantowych, w tym bramek kwantowych.\n1994 Peter Shor opracował algorytm faktoryzacji liczb w czasie wielomianowym, co miało znaczenie dla kryptografii i bezpieczeństwa informacji.\n1996 Lov Grover - Lov Grover stworzył algorytm Grover’a, który okazał się wyjątkowo efektywny w przeszukiwaniu baz danych.\n2000 Pierwszy komputer kwantowy (5 qubitów) oparty na nuklearnym rezonansie magnetycznym został zbudowany, co stanowiło ważny krok w rozwoju fizycznych platform komputerów kwantowych.\n2001 Demonstracja algorytmu Shora potwierdziła praktyczność i znaczenie algorytmów kwantowych.\n2007 Firma D-Wave dokonała pierwszej sprzedaży komercyjnego komputera kwantowego, co miało wpływ na rozwój technologii komputerów kwantowych w sektorze prywatnym.\nFirma IBM dokonała znaczącego przełomu, pokazując, że klasyczne superkomputery nie są w stanie efektywnie symulować systemów zawierających więcej niż 56 kubitów, co jest znane jako “quantum supremacy.”\n23 października 2019: Google ogłosił uzyskanie quantum supremacy na 53 kubitach, co miało duże znaczenie dla przyszłości obliczeń kwantowych.\nIBM osiągnął znaczący postęp w dziedzinie próbkowania, co miało wpływ na konkurencję w dziedzinie komputerów kwantowych.\n2020 Zespół Jian-Wei Pana z University of Science and Technology of China dokonał przełomu, osiągając 76 fotonowych kubitów na komputerze Jiuzhang.\n2021 Kontynuując swoje badania, University of Science and Technology of China osiągnęło kolejne osiągnięcia w dziedzinie obliczeń kwantowych.\n2022 Firma Xanadu dokonała znaczących postępów w dziedzinie technologii komputerów kwantowych.\n\nOd około 1990 roku fizycy i informatycy pracują nad fizyczną realizacją komputerów kwantowych. Jednym z popularnych modeli obliczeń na komputerach kwantowych jest model oparty na kwantowych obwodach (quantum circuit), który wykorzystuje qubity zamiast klasycznych bitów. Podobnie jak w przypadku obwodów klasycznych, w modelu kwantowym definiuje się bramki kwantowe (quantum gates), które pozwalają na wykonywanie operacji na qubitach.\nFizyczna konstrukcja komputera kwantowego, a właściwie qubitu, jest zadaniem nietrywialnym, ponieważ wymaga manipulacji bardzo małym układem, który jest zazwyczaj wyjątkowo wrażliwy na wszelkie oddziaływania z otoczeniem, co nazywa się dekoherencją.\n\n\n\nDlaczego chcemy używać komputerów kwantowych?\n\nKwantowa Złożoność (Quantum Complexity)\nNowy paradygmat wykorzystuje unikalne cechy interferencji, superpozycji i splątania w celu wykonywania obliczeń. Obecnie realizowany jest w trzech modelach:\n\nQuantum Circuits (Obwody Kwantowe) - oparty na modelu bramkowym, w tym QAOA, VQA, oraz metody hybrydowe.\nAdiabatyczne Obliczenia Kwantowe (D-Wave) - polegające na minimalizacji energii, z wykorzystaniem QUBO i analogii do modelu Isinga.\nTopologiczne Komputery Kwantowe - oparte na topologicznych kubitach.\n\nProblemy, które uważamy za trudne do rozwiązania klasycznie, takie jak optymalizacja, stają się łatwiejsze dla komputerów kwantowych. Przykładem jest faktoryzacja liczb. Klasyczne komputery nie są w stanie efektywnie symulować działania kwantowych komputerów. Koszt najlepszych symulatorów rośnie wykładniczo wraz z liczbą kubitów. Możliwości komputerów kwantowych są potencjalnie ogromne, ale obecnie istnieją pewne ograniczenia link. Kwantowy komputer może być używany do efektywnej symulacji niemal dowolnego procesu fizycznego zachodzącego w przyrodzie, choć nie zawsze jesteśmy pewni, czy taka symulacja jest możliwa.\nPodstawowym faktem przewagi komputerów kwantowych nad klasycznymi jest tzw. parallelizm. Ze względu, iż kubity moga znajdowac się w superpozycji stanów, komputer kwantowy może przeprowadzic obliczenia jednocześnie na wszystkich stanach. Co dokładnie to oznacza, poznamy w dalszej czesci wykładu. Rozważmy sytuację w której chcemy poznac działanie funkcji \\(f(x)\\) dla pewnego argumentu \\(x\\) (dla pewnej liczby). Aby znaleźc wynik dla dwóch liczb (np. \\(x=0\\) i \\(x=1\\)) klasyczny komputer musi wykonac dwie operacje. Komputer kwantowy może uzuskac ten wynik przeprowadzajac obliczenia jednocześnie dla obu warości. Do wykonania takiej operacji wystarczy jeden kubit. Następnie jeżeli będziemy chcieli obliczyc nasza funkcję dla kolejnych liczb \\(x=2\\) (która binarnie reprezentowana jest jako \\(10\\)) oraz liczby \\(x=3\\) (binarnie \\(11\\)) musimy dodac kolejny (jeden!) kubit. Dwa kubity moga posłużyc do realizacji czterech równoległych operacji. Jeśli rozważymy 3 kubity znowu mozemy podwoic ilośc operacji (3 kubity maja 8 stanów bazowych). Dodanie kubitu do komputera kwantowego pozwala podwoic liczbę obliczeń. W przypadku klasycznego komputera aby uzyskac taki efekt, potrzeba podwoic rownież liczbę bitów. n-kubitów moze realizowac \\(2^n\\) równoległych obliczeń.\nDruga istotna koncepcja jest pamięc. Klasyczne komputery (np. 64-bitowy laptop) każda liczbę moga zareprezentowac w 64-biotwej reprezentacji (rozszerzenie reprezentacji 8 bitowej). Jeśli chcemy otrzymac 4 liczby w takiej reprezentacji potrzebujemy \\(4\\times 64=256\\) bitów pamięci na twardym dysku. Dla \\(M\\) liczb potrzebujemy zatem \\(M \\times 64\\) bitów pamięci. W przypadku komputera kwantowego operujacego na n-kubitach możemy przechowac \\(2^n\\) różnych współczynników traktujac taki stan jako pamięc. W odróżnieniu od klasycznej pamięci, gdzie ilośc bitów pamięci jest liniowa w stosunku do ilości liczb, pamięc realizowana na kubitach jest funkcja logarytmiczna od ilości liczb.\nDzisiejsze Klasyczne komputery to zaawansowane maszyny zwieraja dziesiatki terabajtów pamięci i moga symulowac niewielki układy kwantowe. Obecnie najwieksze komputery potrafia symulowac ok 46 kubitów. Dla porównania obecnie IBM pozwala użytkowac komputer kwantowy oparty o 127 kubitów (a nawet 1000).\n\n\nKwantowa Korekcja Błędów (Quantum Error Correction)\nDekoherencja, czyli oddziaływanie z otoczeniem, niszczy stan komputera kwantowego i wprowadza błędy obliczeniowe. Istnieje potrzeba zabezpieczenia przed tym zjawiskiem. Obliczenia kwantowe wymagają tzw. korekcji błędów, która pomaga w utrzymaniu integralności obliczeń na komputerach kwantowych. Aktualnie mówimy o erze Noisy Intermediate-Scale Quantum (NISQ), co oznacza, że komputery kwantowe wciąż potrzebują rozwoju w zakresie korekcji błędów i stabilności.\n\n\n\nRealizacja fizyczna komputerów kwantowych\nprocesory kwantowe\n\n\n\nProces obliczeń kwantowych\nWykonanie obliczeń związane jest z pojęciem fizycznego doświadczenia. Będzie się ono składać z trzech części:\n\nprzygotowanie (przygotuj stan kwantowy kubitów),\newolucja (przeprowadź transformację za pomocą bramek kwantowych),\npomiar i interpretacja wyników.\n\n\nPodobnie w informatyce i w analizach danych wykonujemy obliczenia klasyczne. przygotowujemy dane (stan początkowy); następnie wykonujemy program (ewolucja) i odczytujemy wyniki (pomiar).\n\nNie obserwujemy tych etapów podczas codziennej interakcji z komputerem, więc nie zauważamy w sposób świadomy powyższego schematu działania. Piotr Gawron, Oscar Słowik - Rewolucja Stanu, Fantastyczne wprowadzenie do informatyki kwantowej.\n\nKażdy komputer kwantowy (koprocesor) musi komunikować się z podukładem klasycznym."
  },
  {
    "objectID": "lectures/wyklad1.html#quantum-machine-learning",
    "href": "lectures/wyklad1.html#quantum-machine-learning",
    "title": "Komputery klasyczne i kwantowe.",
    "section": "Quantum Machine Learning",
    "text": "Quantum Machine Learning\n\nDane w QML\n\n\nCC - Classical data using classical computers, algorytmy inspirowane obliczeniami kwantowymi\nQC - Quantum data using classical (ML) computers. link1, link2, link3\nCQ - Classical data on qunatum computers. Na tym chcemy się skupić.\nQQ - Quantum data on quantum computers. Who knows?\n\n\n\nRealizacje problemów biznesowych na komputerach kwantowych\n\nSystemy obrony - kryptografia\nRigetti - przewidywanie pogody\nNASA (QuAIL) - Kontrola lotów kosmicznych\nAccenture - Finanse, logistyka, komunikacja i systemy bezpieczeństwa\nBASF - Obliczenia molekularne w chemii kwantowej.\nFord link\nVolkswagen link\nBMW link\nBoeing/Airbus\nGoldman Sach / JPMorgan\nDWave DWave and VW\nIBM Case study\nIBM 127 qubitów\nQuantum Natural Language Processing link\n\n\n\nDostęp do obliczeń kwantowych w chmurze\n\nIBM Quantum z wykorzystaniem biblioteki qiskit.\nPennylane z wykorzystaniem biblioteki pennylane.\nCirq Google z wykorzystaniem biblioteki cirq."
  },
  {
    "objectID": "lectures/wyklad2.html",
    "href": "lectures/wyklad2.html",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "",
    "text": "\\[\n\\newcommand{\\bra}[1]{\\left \\langle #1 \\right \\rvert}\n\\newcommand{\\ket}[1]{\\left \\rvert #1 \\right \\rangle}\n\\newcommand{\\braket}[2]{\\left \\langle #1 \\middle \\rvert #2 \\right \\rangle}\n\\]\nObliczenia (przetwarzanie) wykonywane przez komputer możemy zdefiniować jako transformacje jednego stanu pamięci na inny. Z matematycznego punktu widzenia oznacza to, że obliczenia to funkcje, które przekształcają informacje.\nW przypadku klasycznych komputerów podstawową jednostką pamięci jest bit (ang. binary digit). Funkcje, które operują na bitach nazywamy bramkami logicznymi (ang. logic gates)."
  },
  {
    "objectID": "lectures/wyklad2.html#bramki-logiczne",
    "href": "lectures/wyklad2.html#bramki-logiczne",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "Bramki logiczne",
    "text": "Bramki logiczne\nBramki logiczne to funkcje Boolowskie, które możemy składać w bardziej złożone układy (ang. circuits). Stworzone przez George’a Boole’a w 1854 roku, algebra boola jest matematyczną strukturą, która opisuje zachowanie się obiektów, które mogą przyjmować tylko jedną z dwóch wartości: prawda lub fałsz. Zdolne są one do wykonywania np. dodawania, mnożenia czy też innych bardziej skomplikowanych operacji.\nW latach trzydziestych XX wieku Claude Shannon zastosował algebrę boola do analizy i projektowania układów elektrycznych. Co oznacza, że zareprezentował on funkcje boolowskie za pomocą przełączników elektrycznych. Dlatego też komponenty elektroniczne odpowiadające funkcjom boolowskim nazywamy bramkami logicznymi.\n\nCiekawostka. Richard Feynman wykładał teorię obliczeń na Kalifornijskim Instytucie Technologii. Wykład ten prezentowany jest obecnie jako Feynmana wykłady o obliczeniach (ang. Feynman Lectures on Computation).\n\n\nZ pozoru obliczenia przedstawione w ten sposób wyglądają jako abstrakcjny matematyczny koncept. Jednak jego realizacja zawsze wymaga jakiegoś układu fizycznego realizującego wykonywanie funkcji. Nie ma znaczenia jak ten układ zostanie zrealizowany: kule bilardowe, przełączniki elektroniczne, tranzystory, czy cokolwiek innego.\n\nLogika obliczeń jest niezależna od realizacji bramek logicznych.\n\nZ punktu widzenia realizacji zawsze chodzi nam o kontrolowany sposób zmiany stanu układu.\nNa wykładzie postaramy się wskazać jak i kiedy logika klasycznych obliczeń może być uogólniona przez logikę obliczeń kwantowych. Jasne jest, że przypadek klasyczny powinien być szczególnym przypadkiem kwantowego.\nobwody klasyczne\nZobaczmy jakie bramki możemy określić dla jednego bitu.\n\nBramki logiczne dla jednego bitu\nIle bramek mamy gdy input = 1 bit, output = 1 bit? Ile funkcji możemy zdefiniować dla odwzorowania jednego bitu w jeden bit?\nWszystkie cztery operatory działające na jednym bicie możemy określić jako:\n\nIdentyczność (ang. identity) - \\(I(0)=0\\), \\(I(1)=1\\)\nNegacja (ang. negation, NOT, filps) - \\(NOT(0)=1\\), \\(NOT(1)=0\\)\nStałe zero \\(ZERO(0)=0\\), \\(ZERO(1)=0\\)\nStałe jeden \\(ONE(0)=1\\), \\(ONE(1)=1\\)\n\nPo zastosowaniu operatora \\(I\\) oraz \\(NOT\\), z otrzymanego wyniku możemy wyznaczyc wartości początkowe. Jednak po zastosowaniu dwóch pozostałych operacji \\(ZERO\\) i \\(ONE\\) nie jesteśmy w stanie określic jaki był stan początkowy, który wygenerował określony wynik.\nTe dwie własności pozwalają nam sklasyfikowac operatory jako:\n\nOdwracalne - możemy odtworzyc wartośc początkową z wartości końcowej\nNieodwracalne - NIE możemy odtworzyc wartości początkowej z wartości końcowej.\n\nJak pokażemy później, wszystkie operatory reprezentujące kwantowe bramki będą odwracalne.\n\n\nInne bramki i operacje logiczne\n\nZróbmy krótkie przedstawienie niektórych, klasycznych bramek logicznych.\nBramka logiczna jest implementacją funkcji boolowskiej. Operacją logiczną przeprowadzaną na jednym lub kilku binarnych wejściach produkującą jedną binarną wartość wyjściową. \\[f: \\{0,1\\}^{n} \\to \\{0,1\\} \\]\nKażdy element algebry boola (Boolean Statements) musi być określony jako prawda albo fałsz.\nBramki logiczne możemy wyrazić za pomocą tablicy prawdy (ang. truth table). Tablica ta posiada jedną kolumnę dla każdej zmiennej wejściowej oraz jedną kolumnę dla zmiennej wyjściowej. Kolumna wyjściowa przedstawia wszystkie możliwe wyniki przedstawianej logicznej operacji reprezentowanej przez tablicę. Każdy wiersz tablicy prawdy reprezentuje jedną możliwą kombinację (konfiguracje) danych wejściowych oraz wyniku.\nPodstawowe bramki, które znasz to:\n\nAND - koniunkcja\nOR - alternatywa\nNOT - negacja\nNAND - not and\nXOR - alternatywa wykluczająca (Exclusive OR) - dodawanie modulo 2\n\n\nZadanie: zapisz tablicę prawdy dla każdej bramki.\n\n\nNOT gate\n\n\n\nA\nnot A\n\n\n\n\n0\n\n\n\n1\n\n\n\n\n\n\nAND gate\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\n\n\nOR gate\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\n\n\nNAND\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\n\n\nXOR\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\nPowyższe bramki pozwalają łączyć poszczególne elementy algebry boola ze sobą.\n\nZadanie: Porównaj AND oraz OR z potocznym znaczeniem tych słów.\n\n\nZadanie: Dlaczego Algebra boola nazywana jest algebrą zbiorów?\n\n\nZadanie: Czy składanie podzbiorów zbioru również generuje algebrę boola ?\n\n\nZadanie: ile bramek logicznych możemy stworzyć dla jednego bitu, dwóch bitów, trzech bitów?\n\n\n\n\nUniweralne bramki logiczne - NAND\nTak jak widzieliśmy dla 1-bitu informacji mieliśmy 4 bramki logiczne. Dla 2-bitów mieliśmy 16 bramek logicznych. Dla 3-bitów mamy już 256 możliwości.\nW przypadku 2-bitów nie wypisaliśmy wszystkich bramek, dlaczego?\nCzy musimy realizować wszystkie?\n\nNa szczęście odpowiedź jest negatywna.\n\nIstnieją tzw. zbiory bramek uniwersalnych dzięki którym możemy zrealizować dowolną funkcję boolowską.\n\nNOT, AND, OR\nNAND, AND\nNAND\nNOT, OR\nNOR"
  },
  {
    "objectID": "lectures/wyklad2.html#kody-python",
    "href": "lectures/wyklad2.html#kody-python",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "Kody python",
    "text": "Kody python\n\nZadanie 1: Napisz kod symuljący wyrzucenie symetrycznej monety \\(100\\), \\(1000\\), \\(10000\\) i \\(100000\\) razy\n\nfrom random import randrange\n# randrange(n) zwraca losową wartośc z przedziału (0,...,n-1)\n# Twoje rozwiązanie \n\nZadanie 2: Napisz kod symulujący wyrzucenie niesymetrycznej monety gdzie prawdopodobieństwo wyrzucenia orła będzie wynosiło \\(60\\%\\).\n\nfrom random import randrange\n# randrange(n) zwraca losową wartośc z przedziału (0,...,n-1)\n# Twoje rozwiązanie"
  },
  {
    "objectID": "lectures/wyklad2.html#szyfrowanie-z-wykorzystaniem-bramki-xor",
    "href": "lectures/wyklad2.html#szyfrowanie-z-wykorzystaniem-bramki-xor",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "Szyfrowanie z wykorzystaniem bramki XOR",
    "text": "Szyfrowanie z wykorzystaniem bramki XOR\nWeźmy dwie sekwencje bitów:\nsekwencja A - przedstawiająca naszą zakodowaną wiadomośc: \\[1 0 1 1 0 1 1 1 0 0 0\\]\nlosowa sekwencja B: \\[0 1 1 0 1 1 0 1 1 0 1\\]\ni obliczmy XOR między dwoma sekwencjami (dla poszczególnych kolumn) \\(A\\) XOR \\(B\\).\nZgodnie z tablicą prawdy dla XOR otrzymujemy: \\[1 1 0 1 1 0 1 0 1 0 1\\]\nNa otrzymanym wyniku jeszcze raz zastosuj bramkę XOR.\nCo możesz zauważyć?\n\nOblicz A XOR B XOR B.\n\nZamień wiadomość, którą chcesz zaszyfrować na binarną postać (czyli jako sekwencję zer i jedynek).\nWeź losową sekwencję bitów (klucz szyfrujący), którą zna tylko nadawca i odbiorca.\n\\(1001011010...\\) - wiadomość\n\\(0110101010...\\) - klucz szyfrujący, czyli losowa sekwencja bitów\nZaszyfruj wiadomość wykonując operację XOR na każdym bicie wiadomości i klucza szyfrującego. Tak otrzymaną wiadomość (zaszyfrowaną) wyślij do odbiorcy.\n\ndecyrpting message\nOdbiorca otrzymuje zaszyfrowaną wiadomość (posiada klucz szyfrujący).\nMessage XOR SecretSequence = EncryptedMessage\nMessage XOR SecretSequence XOR SecretSequence = Message\nNie powinniśmy używać SecretSequence więcej niż raz. Jeśli użyjemy jej więcej niż raz, to łatwo jest złamać szyfrowanie.\n\nDlaczego nie powinno się używać szyfru więcej niż jeden raz? Podpowiedź: Zakodowana wiadomość przestaje być losowa."
  },
  {
    "objectID": "lectures/wyklad2.html#kody---rozwiązania-zadań",
    "href": "lectures/wyklad2.html#kody---rozwiązania-zadań",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "kody - rozwiązania zadań",
    "text": "kody - rozwiązania zadań\n\nfrom random import randrange\n# randrange(n) zwraca losową wartośc z przedziału (0,...,n-1)\nfor experiment in [100,1000,10000,100000]:\n    heads = tails = 0\n    for i in range(experiment):\n        if randrange(2) == 0: heads = heads + 1\n        else: tails = tails + 1\n    print(\"experiment:\",experiment)\n    print(\"heads =\",heads,\"  tails = \",tails)\n    print(\"the ratio of #heads/#tails is\",(round(heads/tails,4)))\n    print() # empty line\n\nexperiment: 100\nheads = 47   tails =  53\nthe ratio of #heads/#tails is 0.8868\n\nexperiment: 1000\nheads = 518   tails =  482\nthe ratio of #heads/#tails is 1.0747\n\nexperiment: 10000\nheads = 5029   tails =  4971\nthe ratio of #heads/#tails is 1.0117\n\nexperiment: 100000\nheads = 49770   tails =  50230\nthe ratio of #heads/#tails is 0.9908\n\n\n\n\nfrom random import randrange\n\n# let's pick a random number between {0,1,...,99}\n# it is expected to be less than 60 with probability 0.6\n#     and greater than or equal to 60 with probability 0.4\n# ten sam przypadek możesz zrealizować dla losowania wartosci rzeczywistej\n# pomiędzy 0 i 1.\n\nfor experiment in [100,1000,10000,100000]:\n    heads = tails = 0\n    for i in range(experiment):\n        if randrange(100) &lt;60: heads = heads + 1 # with probability 0.6\n        else: tails = tails + 1 # with probability 0.4\n    print(\"experiment:\",experiment)\n    print(\"heads =\",heads,\"  tails = \",tails)\n    print(\"the ratio of #heads/#tails is\",(round(heads/tails,4)))\n    print() # empty line\n\nexperiment: 100\nheads = 58   tails =  42\nthe ratio of #heads/#tails is 1.381\n\nexperiment: 1000\nheads = 613   tails =  387\nthe ratio of #heads/#tails is 1.584\n\nexperiment: 10000\nheads = 5950   tails =  4050\nthe ratio of #heads/#tails is 1.4691\n\nexperiment: 100000\nheads = 60198   tails =  39802\nthe ratio of #heads/#tails is 1.5124"
  },
  {
    "objectID": "cwiczenia/cw1.html",
    "href": "cwiczenia/cw1.html",
    "title": "Środowisko Python dla obliczeń kwatnowych - biblioteka Qiskit",
    "section": "",
    "text": "python3 -m venv venv\nsource venv/bin/activate\n# Scripts\\Activate\n\npip install qiskit==0.44.1\npip install qiskit[visualization]\n# pip install 'qiskit[visualization]'\npip install qiskit_aer==0.12.2\npip install qiskit_machine_learning==0.6.1\npip install qiskit-finance==0.3.4\npip install qiskit-ibmq-provider==0.20.2\npip install qiskit-ignis==0.7.1\nfrom qiskit import  __qiskit_version__\nprint(__qiskit_version__)\n\nimport qiskit.tools.jupyter\n\n%qiskit_version_table\n\n{'qiskit-terra': '0.25.1', 'qiskit': '0.44.1', 'qiskit-aer': '0.12.2', 'qiskit-ignis': '0.7.1', 'qiskit-ibmq-provider': '0.20.2', 'qiskit-nature': None, 'qiskit-finance': '0.3.4', 'qiskit-optimization': '0.5.0', 'qiskit-machine-learning': '0.6.1'}\n\n\nVersion Information\n\n\n\nSoftware\nVersion\n\n\nqiskit\n0.44.1\n\n\nqiskit-terra\n0.25.1\n\n\nqiskit_finance\n0.3.4\n\n\nqiskit_optimization\n0.5.0\n\n\nqiskit_machine_learning\n0.6.1\n\n\nqiskit_aer\n0.12.2\n\n\nSystem information\n\n\nPython version\n3.10.12\n\n\nPython compiler\nClang 14.0.3 (clang-1403.0.22.14.1)\n\n\nPython build\nmain, Jul 28 2023 18:34:01\n\n\nOS\nDarwin\n\n\nCPUs\n8\n\n\nMemory (Gb)\n16.0\n\n\nWed Nov 08 23:09:22 2023 CET"
  },
  {
    "objectID": "cwiczenia/cw1.html#qiskit-podstawy",
    "href": "cwiczenia/cw1.html#qiskit-podstawy",
    "title": "Środowisko Python dla obliczeń kwatnowych - biblioteka Qiskit",
    "section": "Qiskit podstawy",
    "text": "Qiskit podstawy\n\nfrom qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit\n\n\nqreq = QuantumRegister(4)\n\n\ncreg = ClassicalRegister(4)\n\n\ncircuit = QuantumCircuit(qreq, creg)\n\n\ncircuit.draw('mpl')\n\n\n\n\n\noutput = QuantumRegister(1)\n\n\ncircuit2 = QuantumCircuit(qreq, output, creg)\n\n\ncircuit2.draw(\"mpl\")\n\n\n\n\n\ncircuit3 = QuantumCircuit(qreq)\n\n\ncircuit3.draw('mpl')\n\n\n\n\n\ncircuit4 = QuantumCircuit(3,3)\ncircuit4.draw(\"mpl\")"
  },
  {
    "objectID": "cwiczenia/cw1.html#tworzenie-stanu-jednokubitowego",
    "href": "cwiczenia/cw1.html#tworzenie-stanu-jednokubitowego",
    "title": "Środowisko Python dla obliczeń kwatnowych - biblioteka Qiskit",
    "section": "Tworzenie stanu jednokubitowego",
    "text": "Tworzenie stanu jednokubitowego\n\\[\\ket{\\psi}=\\ket{0}\\]\n\nfrom qiskit import QuantumRegister, QuantumCircuit, Aer, execute\n\n\nqr = QuantumRegister(1)\nqc = QuantumCircuit(qr)\n\n# klasyczny symulator pozwala zobaczyc stan\nbackend = Aer.get_backend('statevector_simulator')\njob=execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\nprint(state)\n\nStatevector([1.+0.j, 0.+0.j],\n            dims=(2,))\n\n\n\nstate.draw('latex')\n\n\\[ |0\\rangle\\]\n\n\n\nfrom qiskit.visualization import plot_bloch_multivector\nplot_bloch_multivector(result.get_statevector())\n\n\n\n\n\nqr = QuantumRegister(1)\nqc = QuantumCircuit(qr)\nqc.h(qr[0])\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\nstate.draw('latex')\n\n\\[\\frac{\\sqrt{2}}{2} |0\\rangle+\\frac{\\sqrt{2}}{2} |1\\rangle\\]\n\n\n\nfrom qiskit.visualization import plot_bloch_multivector\nplot_bloch_multivector(result.get_statevector())"
  },
  {
    "objectID": "cwiczenia/cw1.html#tworzenie-stanu-dwukubitowego",
    "href": "cwiczenia/cw1.html#tworzenie-stanu-dwukubitowego",
    "title": "Środowisko Python dla obliczeń kwatnowych - biblioteka Qiskit",
    "section": "Tworzenie stanu dwukubitowego",
    "text": "Tworzenie stanu dwukubitowego\n\\[\\ket{00}, \\ket{01}, \\ket{10}, \\ket{11}\\]\n\nqr = QuantumRegister(2)\nqc = QuantumCircuit(qr)\nqc.h(qr[0])\nqc.h(qr[1])\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\nstate.draw('latex')\n\n\\[\\frac{1}{2} |00\\rangle+\\frac{1}{2} |01\\rangle+\\frac{1}{2} |10\\rangle+\\frac{1}{2} |11\\rangle\\]\n\n\n\nfrom qiskit.visualization import plot_bloch_multivector\nplot_bloch_multivector(result.get_statevector())\n\n\n\n\n\nqr = QuantumRegister(2)\nqc = QuantumCircuit(qr)\nqc.h(qr[0])\nqc.cx(0,1)\n\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\n\n\nqc.draw('mpl')\n\n\n\n\n\nstate.draw('latex')\n\n\\[\\frac{\\sqrt{2}}{2} |00\\rangle+\\frac{\\sqrt{2}}{2} |11\\rangle\\]\n\n\n\nfrom qiskit.visualization import plot_bloch_multivector\nplot_bloch_multivector(result.get_statevector())"
  },
  {
    "objectID": "cwiczenia/cw1.html#tworzenie-stanu-trzy-kubitowego",
    "href": "cwiczenia/cw1.html#tworzenie-stanu-trzy-kubitowego",
    "title": "Środowisko Python dla obliczeń kwatnowych - biblioteka Qiskit",
    "section": "Tworzenie stanu trzy-kubitowego",
    "text": "Tworzenie stanu trzy-kubitowego\n\\[\\ket{000}, \\ket{001}, \\ket{010}, \\ket{011}, \\ket{100}, \\ket{101}, \\ket{110}, \\ket{111}\\]\n\nqr = QuantumRegister(3)\nqc = QuantumCircuit(qr)\n# qc.x(qr[0]) \n# qc.x(qr[1])\n\n# klasyczny symulator pozwala zobaczyc stan\nbackend = Aer.get_backend('statevector_simulator')\njob=execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\n\nUruchom powyższy kod usuwajac poszczegolne komentarze i sprawdz wynik."
  },
  {
    "objectID": "cwiczenia/cw1.html#dostępne-symulatory",
    "href": "cwiczenia/cw1.html#dostępne-symulatory",
    "title": "Środowisko Python dla obliczeń kwatnowych - biblioteka Qiskit",
    "section": "Dostępne symulatory",
    "text": "Dostępne symulatory\n\nAer.backends()\n\n[AerSimulator('aer_simulator'),\n AerSimulator('aer_simulator_statevector'),\n AerSimulator('aer_simulator_density_matrix'),\n AerSimulator('aer_simulator_stabilizer'),\n AerSimulator('aer_simulator_matrix_product_state'),\n AerSimulator('aer_simulator_extended_stabilizer'),\n AerSimulator('aer_simulator_unitary'),\n AerSimulator('aer_simulator_superop'),\n QasmSimulator('qasm_simulator'),\n StatevectorSimulator('statevector_simulator'),\n UnitarySimulator('unitary_simulator'),\n PulseSimulator('pulse_simulator')]"
  },
  {
    "objectID": "cwiczenia/cw1.html#pomiar-w-obwodzie-i-wielokrotne-uruchamianie-układu",
    "href": "cwiczenia/cw1.html#pomiar-w-obwodzie-i-wielokrotne-uruchamianie-układu",
    "title": "Środowisko Python dla obliczeń kwatnowych - biblioteka Qiskit",
    "section": "Pomiar w obwodzie i wielokrotne uruchamianie układu",
    "text": "Pomiar w obwodzie i wielokrotne uruchamianie układu\n\nfrom qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit\n\nqreg = QuantumRegister(2)\ncreg = ClassicalRegister(2)\n\ncircuit = QuantumCircuit(qreg, creg)\ncircuit.h(qreg[0])\ncircuit.measure(qreg, creg)\n\n&lt;qiskit.circuit.instructionset.InstructionSet at 0x2835ece50&gt;\n\n\n\nfrom qiskit import execute, Aer\nfrom qiskit.visualization import plot_histogram\n\nsimulator = Aer.get_backend('qasm_simulator')\n\njob = execute(circuit, simulator, shots = 1000)\n\ncounts = job.result().get_counts(circuit)\nprint(counts)\n\n{'00': 518, '01': 482}\n\n\n\nplot_histogram(counts)"
  },
  {
    "objectID": "cwiczenia/cw2.html",
    "href": "cwiczenia/cw2.html",
    "title": "Parameterized Quantum Circuit",
    "section": "",
    "text": "from qiskit import QuantumCircuit, execute, Aer, QuantumRegister, ClassicalRegister\nfrom qiskit.visualization import plot_histogram, plot_bloch_multivector\n\nna podstawie https://learn.qiskit.org/course/machine-learning/parameterized-quantum-circuits\n\nfrom qiskit.circuit import QuantumCircuit, Parameter\ntheta = Parameter('θ')\n\nqc = QuantumCircuit(2)\nqc.rz(theta, 0)\nqc.crz(theta, 0, 1)\nqc.draw()\n\n\nfrom qiskit.circuit import ParameterVector\ntheta_list = ParameterVector('θ', length=2)\n\nqc = QuantumCircuit(2)\nqc.rz(theta_list[0], 0)\nqc.crz(theta_list[1], 0, 1)\nqc.draw()\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# First, we need to define the circuits:\ntheta_param = Parameter('θ')\nphi_param = Parameter('Φ')\n\n# Circuit A\nqc_A = QuantumCircuit(1)\nqc_A.h(0)\nqc_A.rz(theta_param, 0)\n\n# Circuit B\nqc_B = QuantumCircuit(1)\nqc_B.h(0)\nqc_B.rz(theta_param, 0)\nqc_B.rx(phi_param, 0)\n\n# Next we uniformly sample the parameter space for the two parameters theta and phi\nnp.random.seed(0)\nnum_param = 1000\ntheta = [2*np.pi*np.random.uniform() for i in range(num_param)]\nphi = [2*np.pi*np.random.uniform() for i in range(num_param)]\n\n# Then we take the parameter value lists, build the state vectors corresponding\n# to each circuit, and plot them on the Bloch sphere:\nfrom qiskit.visualization.bloch import Bloch\nfrom qiskit.quantum_info import Statevector\n\ndef state_to_bloch(state_vec):\n    # Converts state vectors to points on the Bloch sphere\n    phi = np.angle(state_vec.data[1])-np.angle(state_vec.data[0])\n    theta = 2*np.arccos(np.abs(state_vec.data[0]))\n    return [np.sin(theta)*np.cos(phi),np.sin(theta)*np.sin(phi),np.cos(theta)]\n\n# Bloch sphere plot formatting\nwidth, height = plt.figaspect(1/2)\nfig=plt.figure(figsize=(width, height))\nax1, ax2 = fig.add_subplot(1, 2, 1, projection='3d'), fig.add_subplot(1, 2, 2, projection='3d')\nb1,b2 = Bloch(axes=ax1), Bloch(axes=ax2)\nb1.point_color, b2.point_color = ['tab:blue'],['tab:blue']\nb1.point_marker, b2.point_marker= ['o'],['o']\nb1.point_size, b2.point_size=[2],[2]\n\n# Calculate state vectors for circuit A and circuit B for each set of sampled parameters\n# and add to their respective Bloch sphere\nfor i in range(num_param):    \n    state_1=Statevector.from_instruction(qc_A.bind_parameters({theta_param:theta[i]}))\n    state_2=Statevector.from_instruction(qc_B.bind_parameters({theta_param:theta[i], phi_param:phi[i]}))\n    b1.add_points(state_to_bloch(state_1))\n    b2.add_points(state_to_bloch(state_2))\n\nb1.show()\nb2.show()\n\n\n# Deutch-Jozsa algorithm"
  },
  {
    "objectID": "cwiczenia/qiskitML.html",
    "href": "cwiczenia/qiskitML.html",
    "title": "Qiskit Machine Learning",
    "section": "",
    "text": "dokumentacja\n\nQuantum Kernels (Quantum Support Vector Classifier, Quantum Support Vector Regressor)\nQuantum Neural Networks (Variational Quantum Classifier, Variational Quantum Regressor), fature map (ZZFeatureMap, ZFeatureMap, PauliFeatureMap) i ansatz (RealAmplitudes, EfficientSU2, ZZFeatureMap, ZFeatureMap, PauliFeatureMap). Posiada również konektor do PyTorcha.\n\nużywane do klasyfikacji (QSVC) i regresjii (QSVR). Pozwalają na używanie kwantowego uczenia maszynowego bez wiedzy o obliczeniach kwantowych.\n\n# instalacja \n!pip install --upgrade pip\n!pip install qiskit-machine-learning\n!pip install 'qiskit-machine-learning[torch]'\n!pip install 'qiskit-machine-learning[sparse]' \n# !pip install ipywidgets ipykernel\n\n\nimport qiskit.tools.jupyter\n\n%qiskit_version_table\n\nVersion Information\n\n\n\nSoftware\nVersion\n\n\nqiskit\nNone\n\n\nqiskit-terra\n0.25.2\n\n\nSystem information\n\n\nPython version\n3.10.12\n\n\nPython compiler\nClang 14.0.3 (clang-1403.0.22.14.1)\n\n\nPython build\nmain, Jul 28 2023 18:34:01\n\n\nOS\nDarwin\n\n\nCPUs\n8\n\n\nMemory (Gb)\n16.0\n\n\nSun Oct 15 20:37:42 2023 CEST"
  },
  {
    "objectID": "info.html",
    "href": "info.html",
    "title": "Narzędzia",
    "section": "",
    "text": "W terminalu (Windows CMD) wpisz\npython\nJeśli nie odnaleziono komendy uruchom polecenie:\npython3\nZwróć uwagę, aby Twoja wersja nie była niższa niż 3.X Aby wyjść z powłoki pythona użyj funkcji exit()\nPython 3.10.9 (main, Dec 15 2022, 17:11:09) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; exit()\n\n\npython3 -m venv &lt;name of env&gt;\n\nsource &lt;name of env&gt;/bin/activate\n# . env/bin/activate\n\n(venv)$ \nJak uruchomić środowisko pythona w systemie Windows.\nSzybka instalacja podstawowych bibliotek i jupyterlab.\npip install --no-cache --upgrade pip setuptools\n\npip install jupyterlab numpy pandas matplotlib scipy\n# jeśli masz plik requirements.txt z potrzebnymi bibliotekami\npip install -r requirements.txt\n# uruchom \njupyterlab\nW przeglądarce internetowej wpisz: localhost:8888\nPo ponownym uruchomieniu przejdź do katalogu w którym utworzyłeś środowisko, następnie uruchom środowisko i jupyterlab.\nsource &lt;name of env&gt;/bin/activate\njupyterlab\n\n\n\nKurs podstaw pythona Tomas Beuzen polecam.\nUtwórz konto na Kaggle, przejdź do zakładki Courses i przerób cały moduł Pythona. Zawiera on:\n\nwyrażenia i zmienne\nfunkcje\nwarunki i flow programu\nlisty\npętle\nstringi i słowniki\ndodawanie i używanie zewnętrznych bibliotek"
  },
  {
    "objectID": "info.html#python",
    "href": "info.html#python",
    "title": "Narzędzia",
    "section": "",
    "text": "W terminalu (Windows CMD) wpisz\npython\nJeśli nie odnaleziono komendy uruchom polecenie:\npython3\nZwróć uwagę, aby Twoja wersja nie była niższa niż 3.X Aby wyjść z powłoki pythona użyj funkcji exit()\nPython 3.10.9 (main, Dec 15 2022, 17:11:09) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; exit()\n\n\npython3 -m venv &lt;name of env&gt;\n\nsource &lt;name of env&gt;/bin/activate\n# . env/bin/activate\n\n(venv)$ \nJak uruchomić środowisko pythona w systemie Windows.\nSzybka instalacja podstawowych bibliotek i jupyterlab.\npip install --no-cache --upgrade pip setuptools\n\npip install jupyterlab numpy pandas matplotlib scipy\n# jeśli masz plik requirements.txt z potrzebnymi bibliotekami\npip install -r requirements.txt\n# uruchom \njupyterlab\nW przeglądarce internetowej wpisz: localhost:8888\nPo ponownym uruchomieniu przejdź do katalogu w którym utworzyłeś środowisko, następnie uruchom środowisko i jupyterlab.\nsource &lt;name of env&gt;/bin/activate\njupyterlab\n\n\n\nKurs podstaw pythona Tomas Beuzen polecam.\nUtwórz konto na Kaggle, przejdź do zakładki Courses i przerób cały moduł Pythona. Zawiera on:\n\nwyrażenia i zmienne\nfunkcje\nwarunki i flow programu\nlisty\npętle\nstringi i słowniki\ndodawanie i używanie zewnętrznych bibliotek"
  },
  {
    "objectID": "info.html#zacznij-korzystać-z-serwisu-github",
    "href": "info.html#zacznij-korzystać-z-serwisu-github",
    "title": "Narzędzia",
    "section": "Zacznij korzystać z serwisu GitHub",
    "text": "Zacznij korzystać z serwisu GitHub\n\n\n\nTekst na podstawie strony jak korzystać z serwisu github\nPracując nad projektem np. praca magisterska, (samodzielnie lub w zespole) często potrzebujesz sprawdzić jakie zmiany, kiedy i przez kogo zostały wprowadzone do projektu. W zadaniu tym świetnie sprawdza się system kontroli wersji czyli GIT.\nGit możesz pobrać i zainstalować jak zwykły program na dowolnym komputerze. Jednak najczęściej (małe projekty) korzysta się z serwisów z jakimś systemem git. Jednym z najbardziej rozpoznawanych jest GitHub dzięki któremu możesz korzystać z systemu git bez jego instalacji na swoim komputerze.\nW darmowej wersji serwisu GitHub swoje pliki możesz przechowywać w publicznych (dostęp mają wszyscy) repozytoriach.\nSkupimy się wyłącznie na darmowej wersji serwisu GitHub.\ngit --version\n\nStruktura GitHuba\nNa najwyższym poziomie znajdują się konta indywidualne (np http://github.com/sebkaz, bądź zakładane przez organizacje. Użytkownicy indywidualni mogą tworzyć repozytoria publiczne (public ) bądź prywatne (private).\nJeden plik nie powinien przekraczać 100 MB.\nRepo (skrót do repozytorium) tworzymy za pomocą Create a new repository. Każde repo powinno mieć swoją indywidualną nazwę.\n\n\nBranche\nGłówna (tworzona domyślnie) gałąź rapozytorium ma nazwę master.\n\n\nNajważniejsze polecnia do zapamiętania\n\nściąganie repozytorium z sieci\n\ngit clone https://adres_repo.git\n\nW przypadku githuba możesz pobrać repozytorium jako plik zip.\n\n\nTworzenie repozytorium dla lokalnego katalogu\n\n# tworzenie nowego katalogu\nmkdir datamining\n# przejście do katalogu\ncd datamining\n# inicjalizacja repozytorium w katalogu\ngit init\n# powinien pojawić się ukryty katalog .git\n# dodajmy plik\necho \"Info \" &gt;&gt; README.md\n\nPołącz lokalne repozytorium z kontem na githubie\n\ngit remote add origin https://github.com/&lt;twojGit&gt;/nazwa.git\n\nObsługa w 3 krokach\n\n# sprawdź zmiany jakie zostały dokonane\ngit status\n# 1. dodaj wszystkie zmiany\ngit add .\n# 2. zapisz bierzący stan wraz z informacją co zrobiłeś\ngit commit -m \" opis \"\n# 3. potem już zostaje tylko\ngit push origin master\nWarto obejrzeć Youtube course.\nCiekawe i proste wprowadzenie mozna znaleźć tutaj"
  },
  {
    "objectID": "info.html#zacznij-korzystać-z-dockera",
    "href": "info.html#zacznij-korzystać-z-dockera",
    "title": "Narzędzia",
    "section": "Zacznij korzystać z Dockera",
    "text": "Zacznij korzystać z Dockera\n\n\n\nW celu pobrania oprogramowania docker na swój system przejdź do strony.\nJeżli wszystko zainstalowało się prawidłowo wykonaj następujące polecenia:\n\nSprawdź zainstalowaną wersję\n\ndocker --version\n\nŚciągnij i uruchom obraz Hello World i\n\ndocker run hello-world\n\nPrzegląd ściągnietych obrazów:\n\ndocker image ls\n\ndocker images\n\nPrzegląd uruchomionych kontenerów:\n\ndocker ps \n\ndocker ps -all\n\nZatrzymanie uruchomionego kontenera:\n\ndocker stop &lt;CONTAINER ID&gt;\n\nUsunięcie kontenera\n\ndocker rm -f &lt;CONTAINER ID&gt;\nPolecam również krótkie intro"
  },
  {
    "objectID": "ksiazki.html",
    "href": "ksiazki.html",
    "title": "Książki i strony WWW",
    "section": "",
    "text": "Chris Bernhardt, Obliczenia kwantowe dla każdego. PWN 2020\n\n\nWyjaśnienie jak to działa w obliczeniach kwantowych.\n\n\nMichel Le Bellac, Wstęp do informatyki kwantowej. PWN 2011\n\n\nTrudniejsza, dużo matematyki i fizyki.\n\n\nThomas G. Wong, Introduction to Classical and Quantum Computing. Rooted Grove 2022.\n\n\nBardzo dobra!, dużo przykładów, dużo ciekawych informacji wyjaśnianych bardzo szczegółowo.\n\n\nA. Jacquier, O. Kondratyev, Quantum Machine Learning and Optimisation in Finance. On the Road to Quantum Advantage.\nP. Gawron, M. Cholewa, … Rewolucja stanu. Fantastyczne wprowadzenie do informatyki kwantowej. Quantumz.io 2021\n\n\n\n\n\n\n\nL. Moroney, Sztuczna inteligencja i uczenie maszynowe dla programistów. Praktyczny przewodnik po sztucznej inteligencji. Helion 2021. Zobacz opis lub Kup e-book\nBruce, Bruce, Gedeck, Statystyka praktyczna w data science. Wydanie II. Helion. 2021."
  },
  {
    "objectID": "ksiazki.html#książki",
    "href": "ksiazki.html#książki",
    "title": "Książki i strony WWW",
    "section": "",
    "text": "Chris Bernhardt, Obliczenia kwantowe dla każdego. PWN 2020\n\n\nWyjaśnienie jak to działa w obliczeniach kwantowych.\n\n\nMichel Le Bellac, Wstęp do informatyki kwantowej. PWN 2011\n\n\nTrudniejsza, dużo matematyki i fizyki.\n\n\nThomas G. Wong, Introduction to Classical and Quantum Computing. Rooted Grove 2022.\n\n\nBardzo dobra!, dużo przykładów, dużo ciekawych informacji wyjaśnianych bardzo szczegółowo.\n\n\nA. Jacquier, O. Kondratyev, Quantum Machine Learning and Optimisation in Finance. On the Road to Quantum Advantage.\nP. Gawron, M. Cholewa, … Rewolucja stanu. Fantastyczne wprowadzenie do informatyki kwantowej. Quantumz.io 2021\n\n\n\n\n\n\n\nL. Moroney, Sztuczna inteligencja i uczenie maszynowe dla programistów. Praktyczny przewodnik po sztucznej inteligencji. Helion 2021. Zobacz opis lub Kup e-book\nBruce, Bruce, Gedeck, Statystyka praktyczna w data science. Wydanie II. Helion. 2021."
  },
  {
    "objectID": "ksiazki.html#strony-www",
    "href": "ksiazki.html#strony-www",
    "title": "Książki i strony WWW",
    "section": "Strony WWW",
    "text": "Strony WWW\n\nPeter Shor Wykład\n\n\nPakiety Python\n\nQiskit\nPennyLane\n\n\n\nPakiety Julia\n\nYao\nQAOA\n\n\n\nEdytory tekstu\n\nNotepad++\nSublime Text\nVisual Studio Code\n\n\n\nMarkdown\n\nMD\n\n\n\nFilmy\n\nWprowadzenie do obliczeń kwantowych\nQPoland, Bronze, Warsztaty z programowania komputerów kwantowych 2023"
  },
  {
    "objectID": "sylabus.html",
    "href": "sylabus.html",
    "title": "Sylabus",
    "section": "",
    "text": "Nazwa przedmiotu: Wstęp do kwantowego uczenia maszynowego\nJednostka: SGH w Warszawie\nKod przedmiotu: 232530-D, 232530-S\nPunkty ECTS: 3\nJęzyk prowadzenia: polski\nPoziom przedmiotu: średnio-zaawansowany\nProwadzący: Sebastian Zając, sebastian.zajac@sgh.waw.pl\nWebsite: https://sebkaz-teaching.github.io/intro_to_qml/"
  },
  {
    "objectID": "sylabus.html#cel-przedmiotu",
    "href": "sylabus.html#cel-przedmiotu",
    "title": "Sylabus",
    "section": "Cel Przedmiotu",
    "text": "Cel Przedmiotu\nJeszcze do niedawna rozwój technologiczny oparty był na zmniejszaniu rozmiaru tranzystorów i zwiększaniu mocy obliczeniowej procesorów. Ze względu na fizyczne aspekty natury proces ten, od pewnego momentu, musi uwzględniać ograniczenia fizyki kwantowej. Przyszłość może jednak wykorzystać inne narzędzia, których możliwości wykraczają poza klasyczne moce obliczeniowe. Mimo, iż konstrukcja komputerów kwantowych to wciąż etap inżynierski, to okazuje się, że można już wskazać i wykorzystać je do tworzenia algorytmów, które można wykorzystać w dziedzinie uczenia maszynowego. Wykorzystanie algorytmów kwantowych pozwala zmniejszyć czas przetwarzania dużej ilości danych, a tym samym rozszerza możliwości przetwarzania i modelowania danych. Przedstawione na zajęciach biblioteki - IBM qiskit czy Pennylane (python) pozwalają na prostą i szybką konstrukcje dowolnego algorytmu kwantowego. Algorytmy te, jak np. algorytm Grovera wykorzystać można do wielu problemów obliczeniowych uczenia maszynowego bądź do konstrukcji kwantowych sieci neuronowych."
  },
  {
    "objectID": "sylabus.html#program-przedmiotu",
    "href": "sylabus.html#program-przedmiotu",
    "title": "Sylabus",
    "section": "Program przedmiotu",
    "text": "Program przedmiotu\n\nEfekty kształcenia\nWiedza:\n\n\nZna i rozumie koncepcje działania komputera klasycznego i kwantowego\nZna metody kwantowego uczenia maszynowego możliwe do wykorzystania w biznesie\nRozumie potrzebę i możliwości zastosowania komputerów kwantowych\n\n\nUmiejętności:\n\n\nPotrafi stworzyć proste algorytmy z wykorzystaniem kwantowych bramek logicznych\nUmie wykorzystać biblioteki pythonowe do generowania kodów obliczeń kwantowych\nPotrafi wykorzystać metody nadzorowane wykorzystywane w kwantowym uczeniu maszynowym\nPotrafi wykorzystać metody nienadzorowane wykorzystywane w kwantowym uczeniu maszynowym\nUmie stworzyć prostą kwantową sieć neuronową\n\n\nKompetencje społeczne:\n\n\nformułuje problem biznesowy wraz z jego informatycznym rozwiązaniem\nuzupełniania wiedzę teoretyczną jak i praktyczną, w zakresie teorii, programowania, modelowania, nowych technologii informatycznych z wykorzystaniem kwantowego uczenia maszynowego"
  },
  {
    "objectID": "sylabus.html#realizacja-przedmiotu",
    "href": "sylabus.html#realizacja-przedmiotu",
    "title": "Sylabus",
    "section": "Realizacja przedmiotu",
    "text": "Realizacja przedmiotu\n\negzamin testowy: 40%\nkolokwium: 20%\nreferaty/eseje: 40%"
  },
  {
    "objectID": "sylabus.html#literatura",
    "href": "sylabus.html#literatura",
    "title": "Sylabus",
    "section": "Literatura",
    "text": "Literatura\n\nM. Schuld, F. Petruccione - Supervised Learning with Quantum Computers, Quantum Science and Technology. Springer 2018 https://doi.org/10.1007/978-3-319-96424-9\nC. Bernhardt - Obliczenia kwantowe dla każdego, Wydawnictwo Naukowe PWN 2020\nE. R. Johnston, N. Harrigan, M.Gimeno-Segovia - Komputer kwantowy.Programowanie, algorytmy, kod. Helion 2020\nS. Zajac - Modelowanie dla Biznesu. Analiza danych w czasie rzeczywistym. Oficyna Wydawnicza SGH. 2021\nA. K. Bishwas, A. Nani, V. Palade “Quantum Supervised Clustering Algorithm for Big Data” 2018- 3rd International Conference for Convergence in Technology.\nC. Ciliberto er al. “Statistical limits of supervised quantum learning” Physical Review A 102. 4. 2020\nN Wiebe, A. Kapoor, K M. Svore “Quantum perceptron models” NIPS’16 Procedings of the 30th Internationa Conference on Neural information processing Systems. Vol. 29. 2016"
  },
  {
    "objectID": "sylabus.html#literatura-uzupełniająca",
    "href": "sylabus.html#literatura-uzupełniająca",
    "title": "Sylabus",
    "section": "Literatura uzupełniająca",
    "text": "Literatura uzupełniająca\n\nMichael A. Nielsen & Isaac L. Chuang - Quantum Computation and Quantum Information, Cambridge University Press, 2010\nK. Przanowski, S. Zając - Modelowanie dla Biznesu. Metody Machine learning, Modele portfela consumer finance, modelek rekurencyjne analizy przeżycia, modele scoringowe. Oficyna Wydawnicza SGH. 2020\nE. Frątczak - Modelowanie dla Biznesu. Regresja Logistyczna, Regresja Poissona, Survival Data Mining, CRM, Credit Scoring. Oficyna Wydawnicza SGH. 2019"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Informacje ogólne",
    "section": "",
    "text": "Kod: 232530-D\nSemestr zimowy 2023/2024,\nSGH Szkoła Główna Handlowa w Warszawie\nPodstawowe informacje znajdziesz w sylabusie.\nCiekawe książki i strony internetowe zamieszczone zostały w zakładce książki. Jeśli chciał(a)byś coś dodać prześlij informację przez MS teams."
  },
  {
    "objectID": "index.html#var-main.nazwa",
    "href": "index.html#var-main.nazwa",
    "title": "Informacje ogólne",
    "section": "",
    "text": "Kod: 232530-D\nSemestr zimowy 2023/2024,\nSGH Szkoła Główna Handlowa w Warszawie\nPodstawowe informacje znajdziesz w sylabusie.\nCiekawe książki i strony internetowe zamieszczone zostały w zakładce książki. Jeśli chciał(a)byś coś dodać prześlij informację przez MS teams."
  },
  {
    "objectID": "index.html#kalendarz",
    "href": "index.html#kalendarz",
    "title": "Informacje ogólne",
    "section": "Kalendarz",
    "text": "Kalendarz\n\nWykład\nWykład jest realizowany w trybie hybrydowym. Jest on NIEOBOWIĄZKOWY i odbywa się w sali C5D.\n\n02-10-2023 (poniedziałek) 11:40-13:20 -  Wykład 1 \n\nHistoria klasycznego i kwantowego komputera i jego zastosowania. Efekty kwantowe wykorzystywane do przyśpieszenia obliczeń.\nRealizacja:\n\nZna i rozumie koncepcje działania komputera klasycznego i kwantowego\nRozumie potrzebę i możliwości zastosowania komputerów kwantowych\nformułuje problem biznesowy wraz z jego informatycznym rozwiązaniem\nuzupełniania wiedzę teoretyczną jak i praktyczną, w zakresie teorii, programowania, modelowania, nowych technologii informatycznych z wykorzystaniem kwantowego uczenia maszynowego\n\n\n09-10-2023 (poniedziałek) 11:40-13:20 -  Wykład 2 \n\nKlasyczne bramki logiczne - algebra Boola, szyfrowanie\nRealizacja:\n\nZna i rozumie koncepcje działania komputera klasycznego i kwantowego\nRozumie potrzebę i możliwości zastosowania komputerów kwantowych\n\n\n16-10-2023 (poniedziałek) 11:40-13:20 -  Wykład 3 \n\nPrzestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów\n\n23-10-2023 (poniedziałek) 11:40-13:20 -  Wykład 4 \n\nKwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych\nRealizacja:\n\nPotrafi stworzyć proste algorytmy z wykorzystaniem kwantowych bramek logicznych\n\n\n30-10-2023 (poniedziałek) 11:40-13:20 -  Wykład 5 \n\nDZIEŃ WOLNY\nKwantowy Machine Learning w biznesie - metody i implementacje\n\n\nLaboratoria\nWszystkie laboratoria odbywają się w sali C5D.\n\n06-11-2023 (poniedziałek) 11:40-13:20 - Lab1\n\nPrzygotowanie środowiska programistycznego python z wykorzystaniem narzędzia Docker\n\n13-11-2023 (poniedziałek) 11:40-13:20 - Lab2\n\nKwantowe bity z wykorzystaniem biblioteki IBM Qiskit i Pennylane\n\n20-11-2023 (poniedziałek) 11:40-13:20 - Lab3\n\nJedno - kubitowe bramki logiczne\n\n27-11-2023 (poniedziałek) 11:40-13:20 - Lab4\n\nWielokubitowe bramki logiczne\n\n04-12-2023 (poniedziałek) 11:40-13:20 - Lab5\n\nAlgorytm faktoryzacji Shora, przeszukiwanie wg algorytmu Grovera.\n\n11-12-2023 (poniedziałek) 11:40-13:20 - Lab6\n\nKlasyczny i kwantowy perceptron - realizacja w bibliotece qiskit\n\n18-12-2023 (poniedziałek) 11:40-13:20 - Lab7\n\nVariational quantum classifiers - klasyfikacja danych iris\n\n08-01-2024 (poniedziałek) 11:40-13:20 - Lab8\n\nklasyfikacja danych MNIST z wykorzystaniem biblioteki PyTorch Quantum\n\n15-01-2024 (poniedziałek) 11:40-13:20 - Lab9\n\nAlgorytm qPCA z wykorzystaniem do modelowania cen instrumentów finansowych\n\n22-01-2024 (poniedziałek) 11:40-13:20 - Lab10\n\nRealizacje kwantowych sztucznych sieci neuronowych - wprowadzenie"
  },
  {
    "objectID": "index.html#technologie",
    "href": "index.html#technologie",
    "title": "Informacje ogólne",
    "section": "Technologie",
    "text": "Technologie\nUczestnicząc w zajęciach musisz opanować i przynajmniej w podstawowym zakresie posługiwać się następującymi technologiami informatycznymi:\n\nGIT\nPython, Jupyter notebook, Jupyter lab, Colab\nDocker"
  },
  {
    "objectID": "index.html#qpoland",
    "href": "index.html#qpoland",
    "title": "Informacje ogólne",
    "section": "QPoland",
    "text": "QPoland\nQPoland jest cześcią międzynarodowej sieci QWorld.\n\nQWorld is a global network of individuals, groups, and communities collaborating on education and implementation of quantum technologies and research activities."
  },
  {
    "objectID": "cwiczenia/Old_1.html",
    "href": "cwiczenia/Old_1.html",
    "title": "Bramki jednokubitowe",
    "section": "",
    "text": "Bramka X-gate reprezentowana jest przez macierz Pauli-X :\n\\[\nX = \\begin{pmatrix}\n0 & 1 \\\\\n1 & 0 \\\\\n\\end{pmatrix}\n\\]\nBramka X obraca kubit w kierunku osi na sferze Bloch’a o \\(\\pi\\) radianów. Zmienia \\(|0\\rangle\\) na \\(|1\\rangle\\) oraz \\(|1\\rangle\\) na \\(|0\\rangle\\). Jest często nazywana kwantowym odpowiednikiem bramki NOT lub określana jako bit-flip.\n\nx_gate=QuantumCircuit(1) # Create a quantum circuit with 1 qubit\nx_gate.x(0)\nx_gate.draw(output='mpl')\n\n\nbackend = Aer.get_backend('statevector_simulator')\nstate = execute(x_gate, backend).result().get_statevector()\nstate.draw('latex')\nplot_bloch_multivector(state)"
  },
  {
    "objectID": "cwiczenia/Old_1.html#create-logical-gates-with-the-help-of-quantum-gates",
    "href": "cwiczenia/Old_1.html#create-logical-gates-with-the-help-of-quantum-gates",
    "title": "Bramki jednokubitowe",
    "section": "Create logical gates with the help of quantum gates",
    "text": "Create logical gates with the help of quantum gates\n\nNOT gate\nThe NOT gate flips the value of a bit and, as was mentioned before, an X gate can be considered a NOT gate. The truth table for a NOT gate looks like this:\n\n\n\nInput\nOutput\n\n\n\n\n1\n0\n\n\n0\n1\n\n\n\n\nnot_gate=QuantumCircuit(1,1) # Create a quantum circuit with 1 qubit and 1 classical bit\nnot_gate.x(0)\nnot_gate.measure(0,0)\nnot_gate.draw(output='mpl')\n\n\n\nAND gate\nThe output of an AND is true if and only if both inputs are true. The truth table for an AND Gate looks like this:\n\n\n\nA (Input)\nB (Input)\nOutput\n\n\n\n\n0\n0\n0\n\n\n0\n1\n0\n\n\n1\n0\n0\n\n\n1\n1\n1\n\n\n\nWith a Toffoli gate, we can get the result of an AND gate by interpreting the two control bits as the input bits and the target bit as the output bit.\n\nand_gate=QuantumCircuit(3,1) # Create a quantum circuit with 3 qubits and 1 classical bit\nand_gate.ccx(0,1,2)\nand_gate.measure(2,0)\nand_gate.draw(output='mpl')\n\n\n\nOR gate\nAn OR gate returns true if at least one of the input gates is true. The truth table for an OR Gate looks like this:\n\n\n\nA (Input)\nB (Input)\nOutput\n\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n1\n\n\n\n\nor_gate=QuantumCircuit(3,1) # Create a quantum circuit with 3 qubits and 1 classical bit\nor_gate.cx(1,2)\nor_gate.cx(0,2)\nor_gate.ccx(0,1,2)\nor_gate.measure(2,0)\nor_gate.draw(output='mpl')"
  },
  {
    "objectID": "cwiczenia/oldcw2.html",
    "href": "cwiczenia/oldcw2.html",
    "title": "workflow projektów Qiskit",
    "section": "",
    "text": "from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit\n\n# do przechowywania inforamacji o kubitach przygotowujemy obiekt QuantumRegister\n# podajemy ilość kubitów - jako parametr\nqreq = QuantumRegister(4)\n# do przechowywania informacji o stanie kubitu po pomiarze potrzebujemy obiektu ClassicalRegister\n# przechowujemy w nim już tylko klasyczne bity\ncreg = ClassicalRegister(4)\n# Tworzenie Quantum Circuit - obiektu reprezentującego obliczenia kwantowe\n# składa się z obiektów QuantumRegister i ClassicalRegister\ncircuit = QuantumCircuit(qreq, creg)\ncircuit.draw()\n# zdefiniujmy jeszcze inny rejest kubitów\noutput = QuantumRegister(1)\ncircuit2 = QuantumCircuit(qreq, output, creg)\n\n# jesli nie przewidujemy zadnych pomiarów \ncircuit3 = QuantumCircuit(qreq)\nfrom qiskit import Aer\n# Step 1 Import pakietów \n\n# QuantumCircuit - obiekt reprezentujący obliczenia kwantowe\nfrom qiskit import QuantumCircuit, transpile\n# AerSimulator - symulator kwantowy\nfrom qiskit_aer import AerSimulator\n# plot_histogram - funkcja do rysowania histogramów\nfrom qiskit.visualization import plot_histogram\n# Step 2 Inicjalizacja zmiennych \n# Create a Quantum Circuit acting on the q register\ncircuit = QuantumCircuit(2, 2)\n\\[\n\\ket{\\psi} = \\frac{1}{\\sqrt{2}}(\\ket{00}+\\ket{11})\n\\]\n# Step 3 Dodanie bramek\n# Add a H gate on qubit 0\ncircuit.h(0)\n\n# Add a CX (CNOT) gate on control qubit 0 and target qubit 1\ncircuit.cx(0, 1)\n\n# Map the quantum measurement to the classical bits\ncircuit.measure([0, 1], [0, 1])\n# Step 4: Wizualizacja obwodu\n\ncircuit.draw(\"mpl\")\n# Step 5 Symulacja obliczeń kwantowych\n\n# Use Aer's AerSimulator\nsimulator = AerSimulator()\n# Compile the circuit for the support instruction set (basis_gates)\n# and topology (coupling_map) of the backend\ncompiled_circuit = transpile(circuit, simulator)\n\n# Execute the circuit on the aer simulator\njob = simulator.run(compiled_circuit, shots=1000)\n\n# Grab results from the job\nresult = job.result()\n\n# Returns counts\ncounts = result.get_counts(compiled_circuit)\nprint(\"\\nTotal count for 00 and 11 are:\", counts)\n# Step 6: Wizualizacja wyników\n# Plot a histogram\nplot_histogram(counts)"
  },
  {
    "objectID": "cwiczenia/oldcw2.html#kwantowe-obracanie-monety",
    "href": "cwiczenia/oldcw2.html#kwantowe-obracanie-monety",
    "title": "workflow projektów Qiskit",
    "section": "Kwantowe obracanie monety",
    "text": "Kwantowe obracanie monety\n\nfrom qiskit import (QuantumCircuit, QuantumRegister, ClassicalRegister, \n                    execute, Aer, __qiskit_version__)"
  },
  {
    "objectID": "cwiczenia/oldcw2.html#uruchomienie-kodu-na-prawdziwym-komputerze-kwantowym-ibm-q",
    "href": "cwiczenia/oldcw2.html#uruchomienie-kodu-na-prawdziwym-komputerze-kwantowym-ibm-q",
    "title": "workflow projektów Qiskit",
    "section": "Uruchomienie kodu na prawdziwym komputerze kwantowym (IBM Q)",
    "text": "Uruchomienie kodu na prawdziwym komputerze kwantowym (IBM Q)\nToken ibm quantum\n\n# simple circuit\nfrom qiskit import (QuantumCircuit, QuantumRegister, ClassicalRegister, \n                    IBMQ, execute, transpile, Aer, assemble)\nfrom qiskit.tools.monitor import job_monitor\n\n# Suppress warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nqr = QuantumRegister(5)\ncr = ClassicalRegister(5)\n\ncircuit = QuantumCircuit(qr, cr)\ncircuit.x(qr[0])\ncircuit.x(qr[1])\ncircuit.ccx(qr[0], qr[1], qr[2])\ncircuit.cx(qr[0], qr[1])\ncircuit.measure(qr, cr)\n\n\n # replace TOKEN with your API token string (https://quantum-computing.ibm.com/lab/docs/iql/manage/account/ibmq)\nIBMQ.save_account(\"TOKEN\", overwrite=True) \nprovider = IBMQ.load_account()\n\n\n# Get backend for experiment\nprovider = IBMQ.get_provider(hub='ibm-q', group='open', project='main')\nbackend = provider.get_backend('ibmq_quito')\n\n# prepare the circuit for the backend\nmapped_circuit = transpile(circuit, backend=backend)\nqobj = assemble(mapped_circuit, backend=backend, shots=1024)\n\n# execute the circuit\njob = backend.run(qobj)"
  },
  {
    "objectID": "cwiczenia/pennylane.html",
    "href": "cwiczenia/pennylane.html",
    "title": "Pennylane",
    "section": "",
    "text": "Codebook\nPennyLane Challenges"
  },
  {
    "objectID": "lectures/wyklad3.html",
    "href": "lectures/wyklad3.html",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "",
    "text": "\\[\n\\newcommand{\\bra}[1]{\\left \\langle #1 \\right \\rvert}\n\\newcommand{\\ket}[1]{\\left \\rvert #1 \\right \\rangle}\n\\newcommand{\\braket}[2]{\\left \\langle #1 \\middle \\rvert #2 \\right \\rangle}\n\\]\nMechanika Kwantowa opiera się na algebrze liniowej. W ogólności teoria ta posługuje się pojęciem nieskończenie wymiarowej przestrzeni liniowej. Na szczęście do opisu kubitów (2-dim) i układów kwantowych (\\(2^{n}\\)-dim) wystarczy nam pojęcie skończenie wymiarowej przestrzeni wektorowej. Bardzo upraszcza nam to naukę o kwantowym uczeniu maszynowym, gdyż wiele problemów matematycznych (dla fizyków) tutaj nie występuje. Upraszcza to również ilość potrzebnych matematycznych pojęć.\nBędziemy posługiwali się notacją Diraca, jednego z twórców mechaniki kwantowej. W książce Ch. Bernhardta “Obliczenia kwantowe dla każdego” autor rezygnuje z liczb zespolonych, na rzecz liczb rzeczywistych. O ile podejście takie sprawdza się na poziomie opisu o tyle dla pełnego zrozumienia posługiwanie się liczbami zespolonymi jest niezbędne."
  },
  {
    "objectID": "lectures/wyklad3.html#liczby-rzeczywiste-i-zespolone---przypomnienie",
    "href": "lectures/wyklad3.html#liczby-rzeczywiste-i-zespolone---przypomnienie",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Liczby rzeczywiste i zespolone - przypomnienie",
    "text": "Liczby rzeczywiste i zespolone - przypomnienie\nLiczby to matematyczne, abstrakcyjne pojęcia wywodzące się z teorii mnogości (zbiorów). Przykładowo, liczbę 42 można zapisa w postaci dziesiętnej lub binarnej \\(42=101010_2\\). Możemy znaleźć 42 przedmioty i je przeliczyć, ale w naszym przypadku skupimy się na abstrakcyjnym pojęciu liczby, niezależnie od jej reprezentacji. Liczba 42 jest liczbą naturalną. Zbiór liczb naturalnych oznaczamy jako \\(\\mathbb{N}\\). Identyczne cechy abstrakcji mają liczby całkowite \\(\\mathbb{Z}\\), liczby wymierne \\(\\mathbb{Q}\\), liczby rzeczywiste \\(\\mathbb{R}\\) oraz liczby zespolone \\(\\mathbb{C}\\). Nie możemy zobaczyć ani dotknąć liczb, ale możemy wykonywać na nich operacje matematyczne. Liczb Warto zaznaczyc,że liczby zespolone nie są bardziej abstrakcyjne niż liczby rzeczywiste, czy naturalne.\nLiczba zespolona (we współrzędnych Kartezjańskich) składa się z (dwóch liczb rzeczywistych) części rzeczywistej i urojonej: \\[z=x + i y\\] gdzie \\(i^2=-1\\).\nNatomiast częśc rzeczywista \\(R(z)=x\\) i częśc urojona \\(I(z)=y\\).\nNa przykład: \\[1+i\\sqrt{3}\\] \\(R(z)=1\\) i \\(I(z)=\\sqrt{3}\\).\nInaczej mówiąc, liczba zespolona jest sumą liczby rzeczywistej i urojonej.\nLiczy zespolone, można traktowac jako punkty na płaszczyźnie o współrzędnych \\(x\\) i \\(y\\).\n\nKażdą liczbę zespoloną możemy zapisać w postaci polarnej (współrzędne biegunowe) \\[ z=r\\, e^{i \\phi} , \\] gdzie \\(r=|z|\\) to moduł liczby zespolonej, a \\(\\phi\\) to jej argument czyli wyrażony w radianach kąt między osią rzeczywistą a półprostą poprowadzoną od środka ukł. wsp. i przechodzącą przez punkt \\(z\\). \\[ z = r\\, e^{i \\, \\phi} = r\\, (\\cos{\\phi} + i\\, \\sin{\\phi})\\] gdzie: \\[r = |z| = \\sqrt{x^2 + y^2}\\] \\[\\phi = \\arctan{\\frac{y}{x}}. \\] Natomiast: \\[x = r \\cos{\\phi}\\] \\[y = r \\sin{\\phi}\\]\nDla naszego przykładu: \\[1+i\\sqrt{3} = 2 e^{i \\frac{\\pi}{3}} . \\]\n\nUdowodnij samodzielnie, że powyższe równanie jest prawdziwe.\n\nLiczby zespolone można dodawa, mnożyc i dzieli zgodnie z zwykłymi regułami arytmetyki. Dodawanie liczb zespolonych jest łatwe dla liczb w postaci kartezjańskiej. Natomiast mnożenie liczb zespolonych upraszcza się dla postaci biegunowej (następuje zamiana mnożenia na dodawanie fazy).\nLiczba sprzężona do liczby zespolonej powstaje poprzez zmianę znaku części urojonej\n\\(z=x + i\\, y\\,\\,\\,\\,\\) to \\(\\,\\,\\,z^*=x - i y = r*e^{-i \\phi}\\).\nNorma liczby zespolonej \\(z=x + i y\\,\\,\\,\\,\\) to \\(\\,\\,\\,|z|=\\sqrt{x^2 + y^2}=r\\).\nKwadrat normy liczby zespolonej \\(z=x + i y\\,\\,\\,\\,\\) to \\(\\,\\,\\, |z|^2=x^2 + y^2=r^2\\). Warto zauważyc, że każdy kwadrat modułu daje w wyniku nieujemną liczbę rzeczywistą.\nMożna go również zapisać jako \\[|z|^2=z z^* = z^* z\\]\nCzynniki fazowe to szczególna klasa liczb zespolonych \\(z\\) dla której \\(r=1\\).\nOtrzymujemy wtedy: \\[\nz=e^{i \\phi}=\\cos{\\phi} + i\\, \\sin{\\phi}\\] \\[\nz z^* = 1\n\\]\n\nUdowodnij w kartezjańskim i polarnym układzie oniesienia.\n\n\nile wynosi \\(z_1 z_2\\)\n\n\nile wynosi \\(\\frac{z_1}{z_2}\\)"
  },
  {
    "objectID": "lectures/wyklad3.html#wektory-i-przestrzenie-wektorowe",
    "href": "lectures/wyklad3.html#wektory-i-przestrzenie-wektorowe",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Wektory i przestrzenie wektorowe",
    "text": "Wektory i przestrzenie wektorowe\nNiech dany będzie zbiór \\(\\mathbb{V}\\) oraz zbiór \\(\\mathbb{K}\\). Elementy zbioru \\(\\mathbb{V}\\) można ze sobą dodawać i mnożyć przez elementy zbioru \\(\\mathbb{K}\\). Wraz z dodatkowymi opracjami (zdefiniowanymi poniżej) zbiór ten będziemy nazwywali przestrzenią wektorową. Jej elementy to wektory ket \\(\\ket{u}\\) (lub kety).\nJeśli współczynniki liczbowe wektorów będą rzeczywiste to będziemy mówić o przestrzeni wektorowej rzeczywistej. Natomiast jeśli liczby te będą zespolone to będziemy mówić o przestrzeni wektorowej zespolonej.\nMyśląc o wektorach często wyobrażamy je sobie jako strzałki w przestrzeni. Przez strzałki rozumiemy tutaj obiekty znajdujące się w zwykłej przestrzeni i posiadające wielkoś oraz kierunek. Wektory takie mają trzy składowe - trzy (rzeczywiste) współrzędne przestrzenne.\nNa tych zajęciach lepiej zapomniec o tej koncepcji. Wszystkie wektory będą reprezentowane jako abstrakcyjne elementy przestrzeni wektorowej. Warto jednak pamiętać, że wszystkie własności (algebraiczne) wektorów są również spełnione dla strzałek.\n\nAksjomaty przestrzeni stanów\nNiech \\(\\ket{v}\\) , \\(\\ket{u}\\), \\(\\ket{z}\\) będą dowolnymi wektorami, natomiast \\(\\alpha\\) i \\(\\beta\\) dowolnymi liczbami.\n\nSuma dwóch wektorów ket jest wektorem ket \\[\\ket{v} + \\ket{u} = \\ket{z}\\]\nDodawanie wektorów jest przemienne: \\[\\ket{v} + \\ket{u} = \\ket{u} + \\ket{v}\\]\nDodawanie wektorów jest łączne: \\[\\ket{v} + (\\ket{u} + \\ket{z}) = (\\ket{v} + \\ket{u}) + \\ket{z}\\]\nIstnieje szczególny (i jedyny) wektor \\(\\ket{v}\\) odwrotny do wektora \\(\\ket{u}\\): \\[\\ket{v} + \\ket{u} = 0\\]\nIstnieje szczególny (i jedyny) wektor \\(0\\) zerowy. Dla każdego wektora \\(\\ket{v}\\) zachodzi: \\[\\ket{v} + 0 = 0 + \\ket{v} = \\ket{v}\\]\n1*wektor = wektor: \\[1 \\ket{v} = \\ket{v}\\]\nŁączność mnożenia przez skalar: \\[\\alpha (\\beta \\ket{v}) = (\\alpha \\beta) \\ket{v}\\]\nRozdzielność mnożenia przez skalar względem dodawania wektorów: \\[\\alpha (\\ket{v} + \\ket{u}) = \\alpha \\ket{v} + \\alpha \\ket{u}\\]\nRozdzielność dodawania skalarów względem mnożenia przez wektor: \\[(\\alpha + \\beta) \\ket{v} = \\alpha \\ket{v} + \\beta \\ket{v}\\]\n\n\n\nWektory kolumnowe\nZapiszmy pionową jednokolumnową tablicę liczb: \\[ \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix} \\]\nMnożenie przez liczbę: \\[ \\alpha \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix} = \\begin{bmatrix} \\alpha x_1 \\\\ \\alpha x_2 \\\\ .\\\\ \\alpha x_n \\end{bmatrix} \\]\nDodawanie kolumn: \\[ \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix} + \\begin{bmatrix} y_1 \\\\ y_2 \\\\ .\\\\ y_n \\end{bmatrix} = \\begin{bmatrix} x_1+y_1 \\\\ x_2+y_2 \\\\ .\\\\ x_n+y_n \\end{bmatrix}\\]\nPozwala to otrzymać konkretną reprezentację wektorów, które będziemy oznaczać w notacji Diraca przez “ket” \\(\\ket{.}\\).\n\n\nWektory wierszowe\n\\[ \\begin{bmatrix} x_1 \\,\\, x_2 \\,\\, \\dots \\,\\, x_n \\end{bmatrix}\\]\nAnalogicznie do poprzedniego przykładu łatwo określić jak dodawać je ze sobą i mnożyć przez liczbę. W notacji Diraca będziemy takie wektory oznaczali przez “bra” \\(\\bra{.}\\).\n\n\nTranspozycja i sprzężenie Hermitowskie.\nTranspozycja \\(T\\) Zamienia wektory wierszowe na kolumnowe i odwrotnie.\n\\[ \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix}^{T} = \\begin{bmatrix} x_1 \\,\\, x_2 \\,\\, \\dots \\,\\, x_n \\end{bmatrix}\\]\noraz \\[ \\begin{bmatrix} x_1 \\,\\, x_2 \\,\\, \\dots \\,\\, x_n \\end{bmatrix}^{T} = \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix}\\]\nNatomiast sprzężenie hermitowskie \\(\\dagger = T \\ast\\) dodatkowo do transpozycji dodaje sprzężenie zespolone.\n\\[\\ket{u}^{\\dagger} = \\bra{u}\\] \\[\\bra{u}^{\\dagger} = \\ket{u}\\]\nCzyli: \\[ (\\ket{u} + \\ket{v})^{\\dagger} = \\bra{u} + \\bra{v} \\] oraz \\[ \\alpha \\ket{u} \\to \\bra{u} \\alpha^*\\]\n\\[ \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix}^{\\dagger} = \\begin{bmatrix} x_1^* \\,\\, x_2^* \\,\\, \\dots \\,\\, x_n^* \\end{bmatrix}\\]\noraz \\[ \\begin{bmatrix} x_1 \\,\\, x_2 \\,\\, \\dots \\,\\, x_n \\end{bmatrix}^{\\dagger} = \\begin{bmatrix} x_1^* \\\\ x_2^* \\\\ .\\\\ x_n^* \\end{bmatrix}\\]\n\n\nIloczyn skalarny\nIloczynem skalarnym dwóch wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\) nazywany funkcję, która zwraca liczbę.\n\n\\(\\braket{u}{v} = \\braket{v}{u}^{\\ast}\\)\n\\((\\alpha \\bra{u})\\ket{v} = \\alpha \\braket{u}{v}\\)\n\\((\\bra{u} + \\bra{v}) \\ket{z} = \\braket{u}{z} +\\braket{v}{z}\\)\n\\(\\braket{u}{u} &gt; 0\\)\n\\(\\braket{u}{u} = 0, gdy \\ket{u}=\\ket{0}\\)\n\nDla dwóch wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\) otrzymujemy: \\[ \\ket{u} = \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix}, \\ket{v} = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ .\\\\ y_n \\end{bmatrix} \\]\n\\[ \\braket{u}{v} = x_1^{*}y_1 +x_2^{*}y_2 + \\dots + x_n^{*}y_n\\]\n\nZadanie - Udowodnij, że \\(\\braket{u}{u}\\) jest liczbą rzeczywistą.\n\nwektor znormalizowany \\(\\braket{u}{u}=1\\)\nwektory ortogonalne \\(\\braket{u}{v}=0\\)\n\n\nKombinacja liniowa wektorów\nDla dwóch wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\) oraz dwóch liczb \\(\\alpha\\), \\(\\beta\\) możemy stworzyć nowy wektor: \\[\\ket{z} = \\alpha \\ket{u} + \\beta \\ket{v}\\] Wektor ten nazywamy kombinacją liniową wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\) o współczynnikach \\(\\alpha\\) i \\(\\beta\\).\n\n\nBaza\nKażda przestrzeń wektorowa ma bazę.\nDowolny wektor można zapisa jako kombinację liniową wektorów bazowych.\nInteresowac będzie nas baza (obliczeniowa) dla której:\n\\[ \\braket{e_i}{e_i}=1 \\,\\, \\braket{e_i}{e_j}=0 \\,\\, \\text{dla i} \\neq j \\] gdzie \\(i,\\,j = 1,2,\\dots, n\\).\nDowolny wektor \\(\\ket{u}\\) możemy zapisa jako: \\[ \\ket{u} = \\braket{e_1}{u}\\ket{e_1} + \\braket{e_2}{u}\\ket{e_2} + ... + \\braket{e_n}{u}\\ket{e_n}  \\]\nWarto zauważyc: \\[\\braket{e_1}{u}= x_1\\] \\[\\ket{u} = \\sum_{i=1}^{n} \\ket{i}\\bra{i} \\ket{u}\\]"
  },
  {
    "objectID": "lectures/wyklad3.html#formalizm-matematyczny-obliczeń-kwantowych",
    "href": "lectures/wyklad3.html#formalizm-matematyczny-obliczeń-kwantowych",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Formalizm matematyczny obliczeń kwantowych",
    "text": "Formalizm matematyczny obliczeń kwantowych\nTa wiedza wystarczy do wyjaśnienia notacji Diraca.\nIloczyn skalarny \\(\\braket{\\psi}{\\phi}\\) wektorów \\(\\ket{\\psi}\\) i \\(\\ket{\\phi}\\) czytamy jako braket u v.\n\nStan\nW fizyce klasycznej znajomoś stan układu oznacza, iż wiemy wszystko co jest potrzebne\nStanem w mechanice kwantowej nazywamy wektor:\n\\[\\ket{\\psi} = x_0 \\ket{0} + x_1 \\ket{1} + \\dots x_{n-1} \\ket{n-1}\\]\nChcemy aby współczynniki \\(x_i\\) były liczbami zespolonymi a cały wektor był unormowany do 1.\nLiczby \\(x_i\\) nazywamy amplitudami prawdopodobieństwa stanu kwantowego. Jeśli przynajmniej dwie liczby \\(x_i\\) są niezerowe, to układ znajduje się w superpozycji stanów.\n\n\nKubit\nElementarnym obiektem w informatyce kwantowej jest kubit, który realizowany jest jako dwu wymiarowy układ kwantowy. Stan kwantowy kubitu opisuje wektor w przestrzeni liniowej \\(\\mathbb{C}^2\\).\nW celu wykonywania obliczeń i opisu stanu kubitu wybierzemy tzw. bazę obliczeniową: \\[\\ket{0} = \\begin{bmatrix} 1 \\\\ 0  \\end{bmatrix} , \\ket{1} = \\begin{bmatrix} 0 \\\\ 1  \\end{bmatrix}\\]\nTo co wyróżnia kubit w porównaniu do klasycznego bitu dowolny stan \\(\\ket{\\psi}\\) może być superpozycją stanów bazowych: \\[\n\\ket{\\psi} = \\alpha \\ket{0} + \\beta \\ket{1} = \\alpha \\begin{bmatrix} 1 \\\\ 0\\end{bmatrix} + \\beta \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} \\alpha \\\\ \\beta \\end{bmatrix}\n\\] dla którego zachodzi warunek normalizacji: \\[\n\\braket{\\psi}{\\psi} = |\\alpha|^2 + |\\beta|^2 = 1\n\\] gdzie \\(\\alpha, \\beta \\in \\mathbb{C}\\).\n\nZADANIE - oblicz \\(\\braket{\\psi}{\\psi}\\).\n\nLiczby \\(\\alpha\\) i \\(\\beta\\) nazywamy amplitudami prawdopodobieństwa. Są one reprezentowane przez liczby zespolone. Potrzeba 4 liczb rzeczywistych aby je opisać. Ze względu na warunek normalizacji jedną liczbę można obliczyc co oznacza potrzebę użycia już tylko trzech liczb rzeczywiste.\nStan kubitu możemy zapisać w postaci: \\[\n\\ket{\\psi} = e^{i \\gamma}\\left( \\cos{\\frac{\\phi}{2}} \\ket{0} + e^{i \\theta} \\sin{\\frac{\\phi}{2}} \\ket{1} \\right)\n\\] gdzie \\(\\phi \\in [0, \\pi]\\), \\(\\theta \\in [0, 2\\pi]\\) i \\(\\gamma \\in [0, 2\\pi]\\) są liczbami rzeczywistymi.\nWspółczynnik \\(e^{i \\gamma}\\) nazywamy fazą globalną. Ze względu, iż analizować będziemy kwadraty amplitud prawdopodobieństwa to faza globalna nie ma znaczenia. Dlatego możemy napisać: \\[\n\\ket{\\psi} = \\cos{\\frac{\\phi}{2}} \\ket{0} + e^{i \\theta} \\sin{\\frac{\\phi}{2}} \\ket{1}\n= \\begin{bmatrix} \\cos{\\frac{\\phi}{2}} \\\\ e^{i \\theta} \\sin{\\frac{\\phi}{2}} \\end{bmatrix}\n\\]\nWarto zauważyć, że dwa dowolne stany kubitów \\(\\ket{\\psi}\\) i \\(\\ket{\\phi}\\) różnią się o czynnik fazowy \\(e^{i \\gamma}\\) to stany te dają identyczne wyniki.\nLiczby rzeczywiste \\(\\phi\\) i \\(\\theta\\) nazywamy kątami kubitu i możemy interpretować je jako współrzędne na sferze Blocha. Bardzo często będziemy wykorzystywać ją do wizualizacji stanów kubitów.\nStany w bazie obliczeniowej, którymi często będziemy operowac: \\[\\ket{+} = \\frac{1}{\\sqrt{2}}(\\ket{0} + \\ket{1})\\] \\[\\ket{-} = \\frac{1}{\\sqrt{2}}(\\ket{0} - \\ket{1})\\] \\[\\ket{i} =\\frac{1}{\\sqrt{2}}(\\ket{0} + i \\ket{1})\\] \\[\\ket{-i} =\\frac{1}{\\sqrt{2}}(\\ket{0} - i \\ket{1})\\]\nLub: \\[\\frac{1}{\\sqrt{2}}(\\ket{0} + e^{i\\pi/6} \\ket{1})\\] \\[\\frac{\\sqrt{3}}{2}(\\ket{0} + \\frac{1}{2} \\ket{1})\\]\n\nKubit może by dowolnym punktem na sferze Blocha.\n\n\n\nDwa kubity\nZłączenie układu dwóch kubitów realizowane jest przez iloczyn tensorowy (iloczyn Kroneckera).\nRozważmy dwa stany kubitów \\(\\ket{\\psi}\\), \\(\\ket{\\phi}\\)\n\\[\n\\ket{\\psi} = \\alpha \\ket{0} + \\beta \\ket{1} = \\begin{bmatrix} \\alpha \\\\ \\beta \\end{bmatrix}\\, ,\\,\\,\n\\ket{\\phi} = \\gamma \\ket{0} + \\delta \\ket{1} = \\begin{bmatrix} \\gamma \\\\ \\delta \\end{bmatrix}\n\\]\nStan dwukubitowy: \\[\n\\ket{\\psi} \\otimes \\ket{\\phi} = \\begin{bmatrix} \\alpha \\gamma \\\\ \\alpha \\delta \\\\ \\beta \\gamma \\\\ \\beta \\delta \\end{bmatrix} = \\alpha \\gamma \\ket{0} \\otimes \\ket{0} + \\beta \\delta \\ket{1} \\otimes \\ket{0}  + \\alpha \\delta \\ket{0} \\otimes \\ket{1}  + \\beta \\delta \\ket{1} \\otimes \\ket{1}\n\\] co możemy zapisa jako: \\[\n\\ket{\\psi \\phi} = \\alpha \\gamma \\ket{00} + \\beta \\delta \\ket{10}  + \\alpha \\delta \\ket{01}  + \\beta \\delta \\ket{11}\n\\] gdzie: \\[\n\\ket{00} = \\begin{bmatrix} 1 \\\\ 0 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\, \\,\n\\ket{01} = \\begin{bmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\, \\,\n\\ket{10} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 1 \\\\ 0 \\end{bmatrix}, \\, \\,\n\\ket{11} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 1 \\end{bmatrix}\n\\]\nPo przenumerowaniu stanów możemy napisac: \\[\n\\ket{\\Phi} = c_0 \\ket{0} + c_1 \\ket{1}  + c_2 \\ket{2}  + c_3 \\ket{3}\n\\] dla którego: \\[\n|c_0|^2 + |c_1|^2 + |c_2|^2 + |c_3|^2 = 1\n\\]\n\n\nStan separowalny i splątany\nJeżeli istnieją stany \\(\\ket{\\phi_1}\\) i \\(\\ket{\\phi_2}\\) takie, że \\[\\ket{\\psi} = \\ket{\\phi_1} \\otimes \\ket{\\phi_2}\\] to stan nazywamy separowalny.\nZobaczmy, czy istnieje przypadek w którym stan układu dwóch kubitów nie da się zaprezentowac jako iloczynu tensorowego podukładów. Aby to sprawdzic zobaczmy czy istnieją takie liczby \\(c_0, c_1, c_2, c_3\\) dla których nie da się znaleźc \\(\\alpha, \\beta,\\gamma, \\delta\\), które spełniają układ równań: \\[c_0 = \\alpha \\gamma , \\, c_1 = \\alpha \\delta , \\, c_2 = \\beta \\gamma , \\, c_3 = \\beta \\delta \\]\nRozważmy stan \\[\\ket{bell} = \\frac{1}{\\sqrt{2}}(\\ket{0}+\\ket{3}) = \\frac{1}{\\sqrt{2}}(\\ket{00}+\\ket{11})\\]\nZałóżmy, że możemy zapisa stan bell w postaci: \\[ \\alpha \\gamma \\ket{0} + \\beta \\delta \\ket{1}  + \\alpha \\delta \\ket{2}  + \\beta \\delta \\ket{3} \\]\nAby stan bell był separowalny musi by spełniony układ równań:\n\\[\\begin{eqnarray}\n\\alpha \\gamma = \\frac{1}{\\sqrt{2}} \\\\ \\alpha \\delta = 0 \\\\ \\beta \\gamma = 0 \\\\ \\beta \\delta =\\frac{1}{\\sqrt{2}}\n\\end{eqnarray}\\]\nZ warunku drugiego mamy dwie możliwości: albo \\(\\alpha=0\\) lub \\(\\delta=0\\). Jeżeli \\(\\alpha=0\\) to warunek pierwszy nie może byc spełniony. Jeżeli \\(\\delta=0\\) to warunek czwarty nie może byc spełniony. Otrzymujemy sprzecznośc.\nProwadzi to do wniosu, że stan bell'a nie jest stanem separowalnym i jest stanem splątanym. Stany te mają bardzo nieintuicyjne własności. Związany jest z nimi słynny paradox EPR oraz tak zwane nierówności Bella.\n\nSplątane stany Bell’a, wraz z zasadą superpozycji będą podstawowymi kwantowymi własnościami pozwalającymi zrealizowac przewagę obliczeń kwantowych nad obliczeniami klasycznymi."
  },
  {
    "objectID": "lectures/wyklad3.html#pomiar-w-bazie-z",
    "href": "lectures/wyklad3.html#pomiar-w-bazie-z",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Pomiar w bazie Z",
    "text": "Pomiar w bazie Z\nW opisie kubitów wybraliśmy specyficzą bazę (obliczeniową) wektorów, która rozkłada każdy wektor na kombinację wektora \\(\\ket{0}\\) i \\(\\ket{1}\\).\nZasady przestrzeni wektorowej i mechaniki kwantowej dopuszczają tworzenie kombinacji liniowej (superpozycji) dla tych dwóch stanów. \\[\n\\ket{\\psi} = \\alpha \\ket{0} + \\beta \\ket{1}\n\\] Po pomiarze kubitu, czyli na końcu procesu obliczeniowego, ze względu na prawa fizyki otrzymujemy tylko i wyłącznie jeden ze stanów bazowych \\(\\ket{0}\\) lub \\(\\ket{1}\\). Każdy następny pomiar (tej samej obserwabli) będzie kończyc się w tym samym (otrzymanym) stanie.\n\nPomiar niszczy superpozycję kubitu i sprowadza go do jednego ze stanów bazowych.\n\nDla kubitu w superpozycji stanów bazowych jedyne co możemy określic to prawdopodobieństwo otrzymania stanu \\(\\ket{0}\\) i \\(\\ket{1}\\).\n\nPrawdopodobieństwo określone jest jako kwadrat (modułu) amplitudy Dla stanu \\(\\ket{0}\\) \\(P(0) = |\\alpha|^2\\) oraz dla stanu \\(\\ket{1}\\) \\(P(1)= |\\beta|^2\\).\n\nIstnieje możliwośc pomiaru kubitów w innych bazach. Jednak w większości przypadków ograniczymy się do pomiaru w bazie obliczeniowej.\n\nPrzykład\nRozważmy stan \\[\\ket{\\psi} = \\frac{\\sqrt{3}}{2}\\ket{0}+\\frac{1}{2}\\ket{1}\\]\nMożliwe wyniki pomiaru w bazie Z \\(\\{ \\ket{0},\\ket{1} \\}\\).\n\\[\n\\braket{0}{\\psi} = \\bra{0}\\left( \\frac{\\sqrt{3}}{2}\\ket{0} +\\frac{1}{2}\\ket{1}\\right) = \\frac{\\sqrt{3}}{2}\\braket{0}{0} + \\frac{1}{2}\\braket{0}{1} = \\frac{\\sqrt{3}}{2}\n\\] Biorąc kwadrat apmlitudy otrzymujemy kubit w stanie \\(\\ket{0}\\) z prawdopodobieństwem \\(0.75\\). \\[\n\\braket{1}{\\psi} = \\bra{1}\\left( \\frac{\\sqrt{3}}{2}\\ket{0} +\\frac{1}{2}\\ket{1}\\right) = \\frac{\\sqrt{3}}{2}\\braket{1}{0} + \\frac{1}{2}\\braket{1}{1} = \\frac{1}{2}\n\\] Biorąc kwadrat apmlitudy otrzymujemy stan \\(\\ket{1}\\) z prawdopodobieństwem \\(0.25\\).\n\\[\\ket{\\psi} = \\braket{0}{\\psi}\\ket{0} + \\braket{1}{\\psi}\\ket{1}\\]\nDowolna para liniowo niezależnych wektorów jednostkowych \\(\\ket{u}\\) i \\(\\ket{v}\\) pochodząca z dwuwymiarowej przestrzeni wektorowej może tworzyc bazę: \\[\n\\alpha \\ket{0} +\\beta \\ket{1} = \\alpha' \\ket{u} +\\beta' \\ket{v}\n\\] Przykładem może byc tzw Baza Hadamarda \\(\\ket{+}\\) i \\(\\ket{-}\\) zdefiniowana jako: \\[\n\\ket{+} = \\frac{1}{\\sqrt{2}}(\\ket{0}+\\ket{1}) = \\begin{bmatrix} \\frac{1}{\\sqrt{2}} \\\\ \\frac{1}{\\sqrt{2}} \\end{bmatrix}\n\\] \\[\n\\ket{-} = \\frac{1}{\\sqrt{2}}(\\ket{0}-\\ket{1}) = \\begin{bmatrix} \\frac{1}{\\sqrt{2}} \\\\ - \\frac{1}{\\sqrt{2}} \\end{bmatrix}\n\\]\n\nBardzo ważnym etapem jest wybór bazy w której dokonujemy pomiaru. np. dla wektora \\(\\ket{+}\\) pomiar w bazie standardowej pozwoli otrzymac wyniki stanu \\(\\ket{0}\\) i \\(\\ket{1}\\) z prawdopodobieństwami \\(\\frac{1}{2}\\). Natomiast jeśli pomiar dokonywany byłby w bazie Hadamarda to zawsze otrzymamy stan \\(\\ket{+}\\) z prawdopodobieństwem 1."
  },
  {
    "objectID": "lectures/wyklad4.html",
    "href": "lectures/wyklad4.html",
    "title": "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych",
    "section": "",
    "text": "Zmianę stanu kwantowego w czasie opisuje Ewolucja kwantowa.\nRozważmy stan układu w chwili \\(t=0\\).\n\\[\\ket{\\psi_{t=0}}\\] W chwili \\(t=1\\) otrzymujemy stan \\(\\ket{\\psi_{t=1}}\\) t. że: \\[\\ket{\\psi_{t=1}} = \\textbf{U} \\, \\ket{\\psi_{t=0}} \\] gdzie \\(\\textbf{U}\\) jest macierzą unitarną.\nPowyższe równanie opisuje zachowanie wszystkich układów kwantowych.\nRozważmy stany bazowe \\(\\ket{0}\\), \\(\\ket{1}\\), które będziemy chcieli zamienic w ich superpozycję. \\[\n\\textbf{U}\\ket{0} = a\\ket{0} + b\\ket{1} = \\begin{bmatrix} a \\\\ b \\end{bmatrix}\n\\] \\[\n\\textbf{U}\\ket{1} = c\\ket{0} + d\\ket{1} = \\begin{bmatrix} c \\\\ d \\end{bmatrix}\n\\]\nKorzystając z tych równań możemy napisac: \\[\n\\textbf{U} = \\left( \\begin{bmatrix} a \\\\ b \\end{bmatrix} \\begin{bmatrix} c \\\\ d \\end{bmatrix}\\right) = \\begin{bmatrix} a \\, \\, b \\\\ c \\,\\, d \\end{bmatrix}\n\\]\nW informatyce macierze unitarne będą realizowały logiczne bramki kwantowe.\n\nDlaczego bramki kwantowe muszą by unitarne?\n\nNorma stanu kwantowego wynosi zawsze 1. Jest to prawdopodobieństwo całkowite sumy stanów bazowych. Prawdopodobieństwo to powinno by zachowane. Co oznacza, że chcemy znaleźc taką transformację, która nie zmienia długości (kwadratu) wektora. Taka transformacja realizowana jest przez obroty.\nWarto zwrócic uwagę na jeszcze jeden fakt. Macierz odwrotna do \\(\\textbf{U}\\) (oznaczana jako \\(\\textbf{U}^{-1}\\)) zawsze istnieje i jest ona równa sprzężeniu Hermitowskiemu macierzu \\(\\textbf{U}=\\textbf{U}^{\\dagger}\\). Dlatego ewolucja stanów kwantowych zawsze jest odwracalna. A to oznacza, że i bramki muszą by operacjami odwracalnymi. \\[\\ket{\\psi_{t=0}} = \\textbf{U}^{\\dagger} \\ket{\\psi_{t=1}} \\]"
  },
  {
    "objectID": "lectures/wyklad4.html#ewolucja-kwantowa",
    "href": "lectures/wyklad4.html#ewolucja-kwantowa",
    "title": "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych",
    "section": "",
    "text": "Zmianę stanu kwantowego w czasie opisuje Ewolucja kwantowa.\nRozważmy stan układu w chwili \\(t=0\\).\n\\[\\ket{\\psi_{t=0}}\\] W chwili \\(t=1\\) otrzymujemy stan \\(\\ket{\\psi_{t=1}}\\) t. że: \\[\\ket{\\psi_{t=1}} = \\textbf{U} \\, \\ket{\\psi_{t=0}} \\] gdzie \\(\\textbf{U}\\) jest macierzą unitarną.\nPowyższe równanie opisuje zachowanie wszystkich układów kwantowych.\nRozważmy stany bazowe \\(\\ket{0}\\), \\(\\ket{1}\\), które będziemy chcieli zamienic w ich superpozycję. \\[\n\\textbf{U}\\ket{0} = a\\ket{0} + b\\ket{1} = \\begin{bmatrix} a \\\\ b \\end{bmatrix}\n\\] \\[\n\\textbf{U}\\ket{1} = c\\ket{0} + d\\ket{1} = \\begin{bmatrix} c \\\\ d \\end{bmatrix}\n\\]\nKorzystając z tych równań możemy napisac: \\[\n\\textbf{U} = \\left( \\begin{bmatrix} a \\\\ b \\end{bmatrix} \\begin{bmatrix} c \\\\ d \\end{bmatrix}\\right) = \\begin{bmatrix} a \\, \\, b \\\\ c \\,\\, d \\end{bmatrix}\n\\]\nW informatyce macierze unitarne będą realizowały logiczne bramki kwantowe.\n\nDlaczego bramki kwantowe muszą by unitarne?\n\nNorma stanu kwantowego wynosi zawsze 1. Jest to prawdopodobieństwo całkowite sumy stanów bazowych. Prawdopodobieństwo to powinno by zachowane. Co oznacza, że chcemy znaleźc taką transformację, która nie zmienia długości (kwadratu) wektora. Taka transformacja realizowana jest przez obroty.\nWarto zwrócic uwagę na jeszcze jeden fakt. Macierz odwrotna do \\(\\textbf{U}\\) (oznaczana jako \\(\\textbf{U}^{-1}\\)) zawsze istnieje i jest ona równa sprzężeniu Hermitowskiemu macierzu \\(\\textbf{U}=\\textbf{U}^{\\dagger}\\). Dlatego ewolucja stanów kwantowych zawsze jest odwracalna. A to oznacza, że i bramki muszą by operacjami odwracalnymi. \\[\\ket{\\psi_{t=0}} = \\textbf{U}^{\\dagger} \\ket{\\psi_{t=1}} \\]"
  },
  {
    "objectID": "lectures/wyklad4.html#bramki-jednokubitowe",
    "href": "lectures/wyklad4.html#bramki-jednokubitowe",
    "title": "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych",
    "section": "Bramki jednokubitowe",
    "text": "Bramki jednokubitowe\nSpośród wszystkich bramek kwantowych istnieje kilka, które mają swoje ustalone nazwy. Są one często wykorzystywane w obliczeniach kwatnowych. Rozważmy stan \\[\n\\ket{\\psi} = \\alpha \\ket{0} + \\beta \\ket{1}\n\\]\n\nBramka identycznościowa\n\\[\n\\textbf{I} = \\begin{bmatrix} 1 \\,\\, 0 \\\\ 0 \\,\\, 1 \\end{bmatrix}\n\\]\nZobaczmy jak operator ten działa na stany bazowe: \\[ \\textbf{I} \\ket{0} = \\begin{bmatrix} 1 \\,\\, 0 \\\\ 0 \\,\\, 1 \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} \\]\n\\[ \\textbf{I} \\ket{1} = \\begin{bmatrix} 1 \\,\\, 0 \\\\ 0 \\,\\, 1 \\end{bmatrix} \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} \\]\nDziałając na stan \\(\\ket{\\psi}\\) otrzymujemy: \\[\n\\textbf{I} \\ket{\\psi} = \\begin{bmatrix} 1 \\,\\, 0 \\\\ 0 \\,\\, 1 \\end{bmatrix} \\ket{\\psi} =  \\textbf{I} \\left( \\alpha \\ket{0} + \\beta \\ket{1} \\right) = \\alpha \\ket{0} + \\beta \\ket{1}\n\\]\n\n\nBramka negacji X (NOT)\n\\[\n\\textbf{X} = \\begin{bmatrix} 0 \\,\\, 1 \\\\ 1 \\,\\, 0 \\end{bmatrix}\n\\]\n\\[\n\\textbf{X} \\ket{0} = \\begin{bmatrix} 0 \\,\\, 1 \\\\ 1\\,\\, 0 \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\ket{1}\n\\]\n\\[\n\\textbf{X} \\ket{1} = \\begin{bmatrix} 0 \\,\\, 1 \\\\ 1 \\,\\, 0 \\end{bmatrix} \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = \\ket{0}\n\\]\nDziałając na stan \\(\\ket{\\psi}\\) otrzymujemy: \\[\n\\textbf{X} \\ket{\\psi} = \\begin{bmatrix} 0 \\,\\, 1 \\\\ 1 \\,\\, 0 \\end{bmatrix} \\ket{\\psi} =  \\textbf{X} \\left( \\alpha \\ket{0} + \\beta \\ket{1} \\right) = \\alpha \\ket{1} + \\beta \\ket{0}\n\\]\n\n\nBramka negacji fazy Y\n\\[\n\\textbf{Y} = \\begin{bmatrix} 0 \\,\\, -i \\\\ i \\,\\,\\,\\,\\,\\,\\, 0 \\end{bmatrix}\n\\]\n\\[\n\\textbf{Y} \\ket{0} = \\begin{bmatrix} 0 \\,\\, -i \\\\ i \\,\\,\\,\\,\\,\\,\\, 0 \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = i \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = i \\ket{1}\n\\]\n\\[\n\\textbf{Y} \\ket{1} = \\begin{bmatrix} 0 \\, -i \\\\ i \\,\\,\\,\\,\\,\\, 0 \\end{bmatrix} \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = -i \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = -i \\ket{0}\n\\]\nDziałając na stan \\(\\ket{\\psi}\\) otrzymujemy: \\[\n\\textbf{Y} \\ket{\\psi} = \\begin{bmatrix} 0 \\,\\, -i \\\\ i \\,\\,\\,\\,\\,\\, 0 \\end{bmatrix} \\ket{\\psi} =  \\textbf{Y} \\left( \\alpha \\ket{0} + \\beta \\ket{1} \\right) = \\alpha i \\ket{1} - \\beta i \\ket{0}\n\\]\n\n\nBramka negacji fazy i bitu Z\n\\[\n\\textbf{Z} = \\begin{bmatrix} 1 \\,\\,\\,\\,\\,\\,\\,\\,\\, 0 \\\\ 0\\,\\, -1 \\end{bmatrix}\n\\]\n\\[ \\textbf{Z} \\ket{0} = \\begin{bmatrix} 1\\,\\,\\,\\,\\,\\,\\, 0 \\\\ 0 \\, -1 \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = 1 \\ket{0} \\]\n\\[ \\textbf{Z} \\ket{1} = \\begin{bmatrix} 1 \\,\\,\\,\\,\\,\\,\\, 0 \\\\ 0 \\, -1 \\end{bmatrix} \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = -1 \\ket{1}\\]\nDziałając na stan \\(\\ket{\\psi}\\) otrzymujemy: \\[\n\\textbf{Z} \\ket{\\psi} = \\begin{bmatrix} 0 \\,\\,\\,\\,\\,\\,\\, 1 \\\\ 0 \\, -1 \\end{bmatrix} \\ket{\\psi} =  \\textbf{Z} \\left( \\alpha \\ket{0} + \\beta \\ket{1} \\right) = \\alpha \\ket{0} - \\beta \\ket{1}\n\\]\n\n\nBramka Hadamarda H\n\\[\n\\textbf{H}= \\frac{1}{\\sqrt{2}}\\begin{bmatrix} 1\\,\\,\\,\\,\\,\\,\\, 1 \\\\ 1 \\, -1 \\end{bmatrix}\n\\]\n\\[\n\\textbf{H} \\ket{0} = \\frac{1}{\\sqrt{2}}\\begin{bmatrix} 1\\,\\,\\,\\,\\,\\,\\, 1 \\\\ 1 \\, -1 \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = \\frac{1}{\\sqrt{2}} \\left( \\ket{0} + \\ket{1} \\right) = \\ket{+}\n\\]\n\\[\n\\textbf{H} \\ket{1} = \\frac{1}{\\sqrt{2}}\\begin{bmatrix} 1\\,\\,\\,\\,\\,\\,\\, 1 \\\\ 1 \\, -1 \\end{bmatrix}  \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\frac{1}{\\sqrt{2}} \\left( \\ket{0} - \\ket{1} \\right) = \\ket{-}\n\\]\n\n\n\nLosowy bit\nStwórzmy pierwszy kwantowy program, który wykona zadanie niemożliwe do zrealizowania na komputerze klasycznym. Jak można zauważyc zdefiniowaliśmy bramkę Hadamarda. Brami tej nie było w klasycznych bramkach realizujących operacje na bitach.\nNa przestrzeni dziejów informatyki bardzo dużo czasu i wysiłku poświęcono opracowaniu systemu generowania liczb pseudolosowych (ang. PRNG - Pseudo Random Number Generator), który znalazł szerokie zastosowanie. Generowane liczby traktujemy jako pseudolosowe - tzn. jeśli znasz zawartośc pamięci komputera i algorytm PRNG możesz (przynajmniej teoretycznie) przewidzie jaka jest następna wartosc wygenerowanej liczby.\nZgodnie z zasadami fizyki zachwanie kubitu będącego w superpozycji w czasie dokonania pomiaru jest idealne i nieprzewidywalne. Dzięki temu już pojedynczy kubit pozwala wygenerowa najlepszy na świecie generator liczb losowych.\ninstrukcja\n\nPrzygotuj kubit w stanie początkowym \\(\\ket{0}\\).\nZastosuj bramkę Hadamarda tworząc z kubitu stan superpozycji stanów bazowych.\nWykonaj pomiar\n\nWłaśnie otrzymałeś QRNG - Quantum Random Number Generator. Nie jest to tani sposób na losow rzut monetą. Jednak trzeba miec swiadomośc, że tutaj nie ma wewnętrznego mechanizmu, który generuje losowośc - wynika ona tylko i wyłącznie z praw mechaniki kwantowej.\n\nCzy potrafisz wygenerowac losowy bajt?\n\n\n\nGra w obracanie monety\nWykorzystując powyżej zdefiniowane bramki możemy zrealizowa następującą grę:\n\nW grze bierze udział dwóch graczy. Gracze dysponują monetą, której nie widzą w trakcie gry (np. jest zamknięta w pudełku). Natomiast wiedzą, że początkowo moneta ułożona jest orłem do góry (w stanie \\(\\ket{0}\\)) Gra polega na wykonaniu trzech ruchów na przemian. Każdy ruch polega na odwróceniu monety bądź pozostawieniu jej w takim stanie w jakim była. Gracze nie wiedzą jaki ruch wykonuje przeciwnik. Po ostatnim ruchu pudełko zostaje otwarte i gracze sprawdzają w jakiej pozycji jest moneta. Pierwszy gracz wygrywa jeśli moneta jest w pozycji orła, a drugi jeśli przeciwnie.\n\nSzansa wygranej wynosi dla każdego \\(50\\%\\) i jak można sprawdzic nie istnieje strategia wygrywająca.\nPytanie zasadnicze - a co jeśli zamienimy monetę na kubit?\nMożliwe operacje pozostawienia kubitu w takim samym stanie - bramka I, zmiany stanu na przeciwny bramka X. Czyli pierwszy gracz ustala pierwszą bramkę, drugi drugą i ponownie pierwszy trzecią. Otwarcie pudełka to pomiar stanu kubitu.\n\nPrzeanalizuj wynik dla sekwencji I X I\n\nA co jeśli pierwszy gracz wie, że działa na kubicie?\n\nCzy może sprawic on, że wygra zawsze? (skoro wie, że działa na kubicie może użyc innych bramek)"
  },
  {
    "objectID": "lectures/wyklad4.html#bramki-dwukubitowe",
    "href": "lectures/wyklad4.html#bramki-dwukubitowe",
    "title": "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych",
    "section": "Bramki dwukubitowe",
    "text": "Bramki dwukubitowe\nAnalogicznie do bramek jednokubitowych reprezentowanych przez macierze unitarne \\(2\\times 2\\) możemy skonstruowac dowolną wielo-kubitową bramkę. Dla n kubitów mamy \\(2^n \\times 2^n\\) unitarną macierz reprezentującą taką bramkę. Ponieważ bramki wielo kubiotwe działają na raz na kilka kubitów mogą służyc one do otrzymywania stanów splątanych. Mamy również możliwośc stworzyc bramkę warunkową (kontrolowaną), która zmienia bit docelowy jeśli kontrolny bit jest w stanie \\(\\ket{1}\\).\nW ogólności taka bramka może zostac zapisana jako: \\[\n\\textbf{CU}= \\ket{0}\\bra{0} \\otimes \\textbf{I} + \\ket{1}\\bra{1} \\otimes \\textbf{\\textbf{U}}\n\\]\nDowolna bramka działajaca na 1 kubit może byc przedstawiona jako mecierz \\[\n\\textbf{U} = \\begin{bmatrix} u_{00} \\, u_{01} \\\\ u_{10}\\, u_{11} \\end{bmatrix}\n\\]\ndlatego:\n\\[\n\\textbf{CU}=  \\begin{bmatrix} 1 \\,\\, \\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\\\\n0\\,\\, \\,\\,\\, 1 \\,\\,\\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\\\\n0\\,\\,\\,\\, 0\\,\\,\\,  u_{00} \\,\\, u_{01} \\\\ 0\\,\\,\\,\\, 0\\,\\,\\, u_{10}\\, \\, u_{11} \\end{bmatrix}\n\\]\nSzczegółowe działanie bramki można zapisac jako:\n\\[\\begin{align*}\n\\textbf{CU} \\ket{0} \\otimes \\ket{0} &=&  \\ket{0} \\otimes \\ket{0} \\\\\n\\textbf{CU} \\ket{0} \\otimes \\ket{1} &=& \\ket{0}\\otimes \\ket{1} \\\\\n\\textbf{CU} \\ket{1}\\otimes \\ket{0} &=& \\ket{1}\\otimes \\textbf{U} \\ket{0} \\\\\n\\textbf{CU} \\ket{1}\\otimes \\ket{1} &=& \\ket{1}\\otimes \\textbf{U} \\ket{1} \\\\\n\\end{align*}\\]\nDla kwantowej bramki NOT \\(\\textbf{U}= X\\) \\[\n\\text{CNOT} = \\begin{bmatrix} 1 \\,\\, \\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\\\\n0\\,\\, \\,\\,\\, 1 \\,\\,\\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\\\\n0\\,\\,\\,\\,\\, 0\\,\\,\\,\\,\\,  0 \\,\\,\\,\\,\\, 1 \\\\ 0\\,\\,\\,\\,\\, 0\\,\\,\\,\\,\\, 1\\,\\,\\,\\,\\, 0 \\end{bmatrix}\n\\] Bramka ta do drugiego kubitu (targetu) stosuje bramkę X jeśli pierwszy kubit jest w pozycji \\(\\ket{1}\\). W przeciwnym wypadku nie zmienia się nic.\n\\[\\begin{align*}\n\\textbf{CNOT} \\ket{0} \\otimes \\ket{0} &=&  \\ket{0} \\otimes \\ket{0} \\\\\n\\textbf{CNOT} \\ket{0} \\otimes \\ket{1} &=& \\ket{0}\\otimes \\ket{1} \\\\\n\\textbf{CNOT} \\ket{1}\\otimes \\ket{0} &=& \\ket{1}\\otimes \\ket{1} \\\\\n\\textbf{CNOT} \\ket{1}\\otimes \\ket{1} &=& \\ket{1}\\otimes \\ket{0} \\\\\n\\end{align*}\\]\n\nRozpoczynajac od stanu \\(\\ket{0} \\otimes \\ket{0}\\) zadziałaj na pierwszy kubit bramka Hadamarda a na tak otrzymany stan zadziałaj CNOT. Jaki stan uzyskujemy?"
  }
]